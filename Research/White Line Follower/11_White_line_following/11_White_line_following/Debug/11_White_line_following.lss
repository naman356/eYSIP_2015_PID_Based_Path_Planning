
11_White_line_following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000ecc  00000f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080020c  0080020c  00000f6c  2**0
                  ALLOC
  3 .stab         00001c2c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e5  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106b  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000031d  00000000  00000000  000042ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067f  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00004c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00004f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ec       	ldi	r30, 0xCC	; 204
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 35       	cpi	r26, 0x5A	; 90
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <main>
 122:	0c 94 64 07 	jmp	0xec8	; 0xec8 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1d4:	82 95       	swap	r24
 1d6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1de:	98 b1       	in	r25, 0x08	; 8
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 17 02 	sts	0x0217, r25
 30e:	80 93 16 02 	sts	0x0216, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 1f 02 	sts	0x021F, r23
 32e:	60 93 1e 02 	sts	0x021E, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 3f 02 	sts	0x023F, r25
 340:	80 93 3e 02 	sts	0x023E, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 1f 02 	sts	0x021F, r23
 368:	60 93 1e 02 	sts	0x021E, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 2b 02 	sts	0x022B, r25
 37a:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 1f 02 	sts	0x021F, r23
 3a0:	60 93 1e 02 	sts	0x021E, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 26 02 	sts	0x0226, r25
 3b0:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 3d 02 	sts	0x023D, r25
 3d4:	80 93 3c 02 	sts	0x023C, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <spi_pin_config>:
//signed int angle;
float Kp=10, Ki=0.08 ,Kd=20 , integral,derivative;

void spi_pin_config (void)
{
	DDRB = DDRB | 0x07;
 3f2:	84 b1       	in	r24, 0x04	; 4
 3f4:	87 60       	ori	r24, 0x07	; 7
 3f6:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0x07;
 3f8:	85 b1       	in	r24, 0x05	; 5
 3fa:	87 60       	ori	r24, 0x07	; 7
 3fc:	85 b9       	out	0x05, r24	; 5
}
 3fe:	08 95       	ret

00000400 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 400:	87 b1       	in	r24, 0x07	; 7
 402:	87 6f       	ori	r24, 0xF7	; 247
 404:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 406:	88 b1       	in	r24, 0x08	; 8
 408:	80 78       	andi	r24, 0x80	; 128
 40a:	88 b9       	out	0x08, r24	; 8
}
 40c:	08 95       	ret

0000040e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00; 
 40e:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
 410:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
 412:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
 416:	10 92 08 01 	sts	0x0108, r1
}
 41a:	08 95       	ret

0000041c <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
	DDRA = DDRA | 0x0F;
 41c:	81 b1       	in	r24, 0x01	; 1
 41e:	8f 60       	ori	r24, 0x0F	; 15
 420:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 422:	82 b1       	in	r24, 0x02	; 2
 424:	80 7f       	andi	r24, 0xF0	; 240
 426:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 428:	ea e0       	ldi	r30, 0x0A	; 10
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	80 81       	ld	r24, Z
 42e:	88 61       	ori	r24, 0x18	; 24
 430:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 432:	eb e0       	ldi	r30, 0x0B	; 11
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	80 81       	ld	r24, Z
 438:	88 61       	ori	r24, 0x18	; 24
 43a:	80 83       	st	Z, r24
}
 43c:	08 95       	ret

0000043e <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();	adc_pin_config();
 43e:	0e 94 00 02 	call	0x400	; 0x400 <lcd_port_config>
 442:	0e 94 07 02 	call	0x40e	; 0x40e <adc_pin_config>
	motion_pin_config();
 446:	0e 94 0e 02 	call	0x41c	; 0x41c <motion_pin_config>
	spi_pin_config();	
 44a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <spi_pin_config>
}
 44e:	08 95       	ret

00000450 <spi_init>:

//Function To Initialize SPI bus
// clock rate: 921600hz
void spi_init(void)
{
	SPCR = 0x53; //setup SPI
 450:	83 e5       	ldi	r24, 0x53	; 83
 452:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; //setup SPI
 454:	1d bc       	out	0x2d, r1	; 45
	SPDR = 0x00;
 456:	1e bc       	out	0x2e, r1	; 46
}
 458:	08 95       	ret

0000045a <spi_master_tx_and_rx>:
*/
unsigned char spi_master_tx_and_rx (unsigned char data)
{
	unsigned char rx_data = 0;

	PORTB = PORTB & 0xFE; // make SS pin low
 45a:	28 98       	cbi	0x05, 0	; 5
	SPDR = data;
 45c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data transmission to complete
 45e:	0d b4       	in	r0, 0x2d	; 45
 460:	07 fe       	sbrs	r0, 7
 462:	fd cf       	rjmp	.-6      	; 0x45e <spi_master_tx_and_rx+0x4>
 464:	86 e6       	ldi	r24, 0x66	; 102
 466:	9e e0       	ldi	r25, 0x0E	; 14
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <spi_master_tx_and_rx+0xe>
 46c:	00 00       	nop

	_delay_ms(1); //time for ADC conversion in the slave microcontroller
	
	SPDR = 0x50; // send dummy byte to read back data from the slave microcontroller
 46e:	80 e5       	ldi	r24, 0x50	; 80
 470:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data reception to complete
 472:	0d b4       	in	r0, 0x2d	; 45
 474:	07 fe       	sbrs	r0, 7
 476:	fd cf       	rjmp	.-6      	; 0x472 <spi_master_tx_and_rx+0x18>
	rx_data = SPDR;
 478:	8e b5       	in	r24, 0x2e	; 46
	PORTB = PORTB | 0x01; // make SS high
 47a:	28 9a       	sbi	0x05, 0	; 5
	return rx_data;
}
 47c:	08 95       	ret

0000047e <timer5_init>:
  // PWM 8bit fast, TOP=0x00FF
  // Timer Frequency:225.000Hz
*/
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 47e:	e1 e2       	ldi	r30, 0x21	; 33
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 490:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 494:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 498:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 49c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 4a0:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 4a4:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 4a8:	89 ea       	ldi	r24, 0xA9	; 169
 4aa:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 4ae:	8b e0       	ldi	r24, 0x0B	; 11
 4b0:	80 83       	st	Z, r24
}
 4b2:	08 95       	ret

000004b4 <adc_init>:
/*
  //Function Name -  adc_init
*/
void adc_init()
{
	ADCSRA = 0x00;
 4b4:	ea e7       	ldi	r30, 0x7A	; 122
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 4ba:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 4be:	80 e2       	ldi	r24, 0x20	; 32
 4c0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 4c8:	86 e8       	ldi	r24, 0x86	; 134
 4ca:	80 83       	st	Z, r24
}
 4cc:	08 95       	ret

000004ce <ADC_Conversion>:
  //Logic - convert sensor values to digital
*/
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 4ce:	88 30       	cpi	r24, 0x08	; 8
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <ADC_Conversion+0xa>
	{
 		ADCSRB = 0x08;
 4d2:	98 e0       	ldi	r25, 0x08	; 8
 4d4:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 4d8:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4e0:	ea e7       	ldi	r30, 0x7A	; 122
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 4ea:	80 81       	ld	r24, Z
 4ec:	84 ff       	sbrs	r24, 4
 4ee:	fd cf       	rjmp	.-6      	; 0x4ea <ADC_Conversion+0x1c>
	a=ADCH;
 4f0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4f4:	ea e7       	ldi	r30, 0x7A	; 122
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	90 81       	ld	r25, Z
 4fa:	90 61       	ori	r25, 0x10	; 16
 4fc:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 4fe:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 502:	08 95       	ret

00000504 <print_sensor>:
/*
  //Function Name -  print_sensor
  //Logic - print values on desired row and column
*/
int print_sensor(char row, char coloumn,unsigned char channel)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	d8 2f       	mov	r29, r24
 50a:	c6 2f       	mov	r28, r22
 50c:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
 50e:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
 512:	48 2f       	mov	r20, r24
 514:	80 93 20 02 	sts	0x0220, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 518:	8d 2f       	mov	r24, r29
 51a:	6c 2f       	mov	r22, r28
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	23 e0       	ldi	r18, 0x03	; 3
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	
	return ADC_Value ;
}
 526:	80 91 20 02 	lds	r24, 0x0220
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <velocity>:
  //Function Name -  velocity
  //Logic - control velocity of motors
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 532:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 536:	60 93 2a 01 	sts	0x012A, r22
}
 53a:	08 95       	ret

0000053c <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
 53c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 53e:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
 540:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 542:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
 544:	92 b9       	out	0x02, r25	; 2
}
 546:	08 95       	ret

00000548 <forward>:

void forward (void) 
{
	motion_set (0x06);
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 54e:	08 95       	ret

00000550 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 550:	85 e0       	ldi	r24, 0x05	; 5
 552:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 556:	08 95       	ret

00000558 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 55e:	08 95       	ret

00000560 <stop>:

void stop (void)
{
  motion_set (0x00);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 566:	08 95       	ret

00000568 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 568:	e1 ec       	ldi	r30, 0xC1	; 193
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 56e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 578:	8f e5       	ldi	r24, 0x5F	; 95
 57a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 57e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 582:	88 e9       	ldi	r24, 0x98	; 152
 584:	80 83       	st	Z, r24
}
 586:	08 95       	ret

00000588 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	0b b6       	in	r0, 0x3b	; 59
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	cf 93       	push	r28
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 5b0:	e6 ec       	ldi	r30, 0xC6	; 198
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	c0 81       	ld	r28, Z
 5b6:	c0 93 27 02 	sts	0x0227, r28

	UDR0 = data; 				//echo data back to PC
 5ba:	c0 83       	st	Z, r28
		
	if(data == 0x50) //ASCII value of P
 5bc:	c0 35       	cpi	r28, 0x50	; 80
 5be:	c9 f4       	brne	.+50     	; 0x5f2 <__vector_25+0x6a>
	{
		Kp=Kp+0.1;
 5c0:	60 91 08 02 	lds	r22, 0x0208
 5c4:	70 91 09 02 	lds	r23, 0x0209
 5c8:	80 91 0a 02 	lds	r24, 0x020A
 5cc:	90 91 0b 02 	lds	r25, 0x020B
 5d0:	2d ec       	ldi	r18, 0xCD	; 205
 5d2:	3c ec       	ldi	r19, 0xCC	; 204
 5d4:	4c ec       	ldi	r20, 0xCC	; 204
 5d6:	5d e3       	ldi	r21, 0x3D	; 61
 5d8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 5dc:	dc 01       	movw	r26, r24
 5de:	cb 01       	movw	r24, r22
 5e0:	80 93 08 02 	sts	0x0208, r24
 5e4:	90 93 09 02 	sts	0x0209, r25
 5e8:	a0 93 0a 02 	sts	0x020A, r26
 5ec:	b0 93 0b 02 	sts	0x020B, r27
 5f0:	36 c0       	rjmp	.+108    	; 0x65e <__vector_25+0xd6>
	}

	if(data == 0x70) //ASCII value of p
 5f2:	c0 37       	cpi	r28, 0x70	; 112
 5f4:	c9 f4       	brne	.+50     	; 0x628 <__vector_25+0xa0>
	{
		Kp=Kp-0.1;
 5f6:	60 91 08 02 	lds	r22, 0x0208
 5fa:	70 91 09 02 	lds	r23, 0x0209
 5fe:	80 91 0a 02 	lds	r24, 0x020A
 602:	90 91 0b 02 	lds	r25, 0x020B
 606:	2d ec       	ldi	r18, 0xCD	; 205
 608:	3c ec       	ldi	r19, 0xCC	; 204
 60a:	4c ec       	ldi	r20, 0xCC	; 204
 60c:	5d e3       	ldi	r21, 0x3D	; 61
 60e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__subsf3>
 612:	dc 01       	movw	r26, r24
 614:	cb 01       	movw	r24, r22
 616:	80 93 08 02 	sts	0x0208, r24
 61a:	90 93 09 02 	sts	0x0209, r25
 61e:	a0 93 0a 02 	sts	0x020A, r26
 622:	b0 93 0b 02 	sts	0x020B, r27
 626:	36 c0       	rjmp	.+108    	; 0x694 <__vector_25+0x10c>
	}

	if(data == 0x49) //ASCII value of I
 628:	c9 34       	cpi	r28, 0x49	; 73
 62a:	c9 f4       	brne	.+50     	; 0x65e <__vector_25+0xd6>
	{
		Ki=Ki+0.01;
 62c:	60 91 04 02 	lds	r22, 0x0204
 630:	70 91 05 02 	lds	r23, 0x0205
 634:	80 91 06 02 	lds	r24, 0x0206
 638:	90 91 07 02 	lds	r25, 0x0207
 63c:	2a e0       	ldi	r18, 0x0A	; 10
 63e:	37 ed       	ldi	r19, 0xD7	; 215
 640:	43 e2       	ldi	r20, 0x23	; 35
 642:	5c e3       	ldi	r21, 0x3C	; 60
 644:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 648:	dc 01       	movw	r26, r24
 64a:	cb 01       	movw	r24, r22
 64c:	80 93 04 02 	sts	0x0204, r24
 650:	90 93 05 02 	sts	0x0205, r25
 654:	a0 93 06 02 	sts	0x0206, r26
 658:	b0 93 07 02 	sts	0x0207, r27
 65c:	36 c0       	rjmp	.+108    	; 0x6ca <__vector_25+0x142>
	}

	if(data == 0x69) //ASCII value of i
 65e:	c9 36       	cpi	r28, 0x69	; 105
 660:	c9 f4       	brne	.+50     	; 0x694 <__vector_25+0x10c>
	{
		Ki=Ki-0.01;
 662:	60 91 04 02 	lds	r22, 0x0204
 666:	70 91 05 02 	lds	r23, 0x0205
 66a:	80 91 06 02 	lds	r24, 0x0206
 66e:	90 91 07 02 	lds	r25, 0x0207
 672:	2a e0       	ldi	r18, 0x0A	; 10
 674:	37 ed       	ldi	r19, 0xD7	; 215
 676:	43 e2       	ldi	r20, 0x23	; 35
 678:	5c e3       	ldi	r21, 0x3C	; 60
 67a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__subsf3>
 67e:	dc 01       	movw	r26, r24
 680:	cb 01       	movw	r24, r22
 682:	80 93 04 02 	sts	0x0204, r24
 686:	90 93 05 02 	sts	0x0205, r25
 68a:	a0 93 06 02 	sts	0x0206, r26
 68e:	b0 93 07 02 	sts	0x0207, r27
 692:	35 c0       	rjmp	.+106    	; 0x6fe <__vector_25+0x176>
	}

	if(data == 0x44) //ASCII value of D
 694:	c4 34       	cpi	r28, 0x44	; 68
 696:	c9 f4       	brne	.+50     	; 0x6ca <__vector_25+0x142>
	{
		Kd=Kd+0.1;
 698:	60 91 00 02 	lds	r22, 0x0200
 69c:	70 91 01 02 	lds	r23, 0x0201
 6a0:	80 91 02 02 	lds	r24, 0x0202
 6a4:	90 91 03 02 	lds	r25, 0x0203
 6a8:	2d ec       	ldi	r18, 0xCD	; 205
 6aa:	3c ec       	ldi	r19, 0xCC	; 204
 6ac:	4c ec       	ldi	r20, 0xCC	; 204
 6ae:	5d e3       	ldi	r21, 0x3D	; 61
 6b0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 6b4:	dc 01       	movw	r26, r24
 6b6:	cb 01       	movw	r24, r22
 6b8:	80 93 00 02 	sts	0x0200, r24
 6bc:	90 93 01 02 	sts	0x0201, r25
 6c0:	a0 93 02 02 	sts	0x0202, r26
 6c4:	b0 93 03 02 	sts	0x0203, r27
 6c8:	1a c0       	rjmp	.+52     	; 0x6fe <__vector_25+0x176>
	}

	if(data == 0x64) //ASCII value of d
 6ca:	c4 36       	cpi	r28, 0x64	; 100
 6cc:	c1 f4       	brne	.+48     	; 0x6fe <__vector_25+0x176>
	{
		Kd=Kd-0.1;
 6ce:	60 91 00 02 	lds	r22, 0x0200
 6d2:	70 91 01 02 	lds	r23, 0x0201
 6d6:	80 91 02 02 	lds	r24, 0x0202
 6da:	90 91 03 02 	lds	r25, 0x0203
 6de:	2d ec       	ldi	r18, 0xCD	; 205
 6e0:	3c ec       	ldi	r19, 0xCC	; 204
 6e2:	4c ec       	ldi	r20, 0xCC	; 204
 6e4:	5d e3       	ldi	r21, 0x3D	; 61
 6e6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__subsf3>
 6ea:	dc 01       	movw	r26, r24
 6ec:	cb 01       	movw	r24, r22
 6ee:	80 93 00 02 	sts	0x0200, r24
 6f2:	90 93 01 02 	sts	0x0201, r25
 6f6:	a0 93 02 02 	sts	0x0202, r26
 6fa:	b0 93 03 02 	sts	0x0203, r27
	}
}
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	cf 91       	pop	r28
 704:	bf 91       	pop	r27
 706:	af 91       	pop	r26
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	7f 91       	pop	r23
 70e:	6f 91       	pop	r22
 710:	5f 91       	pop	r21
 712:	4f 91       	pop	r20
 714:	3f 91       	pop	r19
 716:	2f 91       	pop	r18
 718:	0f 90       	pop	r0
 71a:	0b be       	out	0x3b, r0	; 59
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <init_devices>:
  //Function Name -  init_devices
  //Logic - intitialization
*/
void init_devices (void)
{
 	cli(); //Clears the global interrupts
 726:	f8 94       	cli
    spi_init();
 728:	0e 94 28 02 	call	0x450	; 0x450 <spi_init>
	port_init();
 72c:	0e 94 1f 02 	call	0x43e	; 0x43e <port_init>
	adc_init();
 730:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <adc_init>
	timer5_init();
 734:	0e 94 3f 02 	call	0x47e	; 0x47e <timer5_init>
	uart0_init(); //Initailize UART1 for serial communiaction
 738:	0e 94 b4 02 	call	0x568	; 0x568 <uart0_init>
	sei();   //Enables the global interrupts
 73c:	78 94       	sei
}
 73e:	08 95       	ret

00000740 <sensor_on_line>:
	/*reading = sensor/10;
	reading = 10*reading;
	return 	reading;*/
	if(sensor < 30)
	{
		return 1;
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	8e 31       	cpi	r24, 0x1E	; 30
 746:	91 05       	cpc	r25, r1
 748:	14 f0       	brlt	.+4      	; 0x74e <sensor_on_line+0xe>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}		 
}
 74e:	82 2f       	mov	r24, r18
 750:	93 2f       	mov	r25, r19
 752:	08 95       	ret

00000754 <PID>:
  //Input - error corresponding to sensor which is on line
  //Output - correction value which will be added in left and right motor speed
  //Logic - calculate P,I and D errors individualy and add them.
*/
signed int PID(signed int position)
{
 754:	6f 92       	push	r6
 756:	7f 92       	push	r7
 758:	8f 92       	push	r8
 75a:	9f 92       	push	r9
 75c:	af 92       	push	r10
 75e:	bf 92       	push	r11
 760:	cf 92       	push	r12
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
	
	proportional = position - setpoint; // The "proportional" term should be 0 when we are on the white line.
 770:	20 91 0c 02 	lds	r18, 0x020C
 774:	30 91 0d 02 	lds	r19, 0x020D
 778:	ec 01       	movw	r28, r24
 77a:	c2 1b       	sub	r28, r18
 77c:	d3 0b       	sbc	r29, r19
 77e:	d0 93 24 02 	sts	0x0224, r29
 782:	c0 93 23 02 	sts	0x0223, r28
	
	integral += proportional;  // Compute the integral (sum) of the position using proportional error.
 786:	be 01       	movw	r22, r28
 788:	88 27       	eor	r24, r24
 78a:	77 fd       	sbrc	r23, 7
 78c:	80 95       	com	r24
 78e:	98 2f       	mov	r25, r24
 790:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__floatsisf>
 794:	6b 01       	movw	r12, r22
 796:	7c 01       	movw	r14, r24
 798:	20 91 42 02 	lds	r18, 0x0242
 79c:	30 91 43 02 	lds	r19, 0x0243
 7a0:	40 91 44 02 	lds	r20, 0x0244
 7a4:	50 91 45 02 	lds	r21, 0x0245
 7a8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 7ac:	16 2f       	mov	r17, r22
 7ae:	07 2f       	mov	r16, r23
 7b0:	78 2e       	mov	r7, r24
 7b2:	69 2e       	mov	r6, r25
 7b4:	86 2f       	mov	r24, r22
 7b6:	90 2f       	mov	r25, r16
 7b8:	a7 2d       	mov	r26, r7
 7ba:	b6 2d       	mov	r27, r6
 7bc:	80 93 42 02 	sts	0x0242, r24
 7c0:	90 93 43 02 	sts	0x0243, r25
 7c4:	a0 93 44 02 	sts	0x0244, r26
 7c8:	b0 93 45 02 	sts	0x0245, r27
	if (integral > 200)
	{
		integral = 200 ;
	}*/
	
	derivative = (proportional - last_proportional); //compute derivative using past and present proportional value.
 7cc:	80 91 1a 02 	lds	r24, 0x021A
 7d0:	90 91 1b 02 	lds	r25, 0x021B
 7d4:	be 01       	movw	r22, r28
 7d6:	68 1b       	sub	r22, r24
 7d8:	79 0b       	sbc	r23, r25
 7da:	88 27       	eor	r24, r24
 7dc:	77 fd       	sbrc	r23, 7
 7de:	80 95       	com	r24
 7e0:	98 2f       	mov	r25, r24
 7e2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__floatsisf>
 7e6:	4b 01       	movw	r8, r22
 7e8:	5c 01       	movw	r10, r24
 7ea:	60 93 12 02 	sts	0x0212, r22
 7ee:	70 93 13 02 	sts	0x0213, r23
 7f2:	80 93 14 02 	sts	0x0214, r24
 7f6:	90 93 15 02 	sts	0x0215, r25
		
	/*lcd_print(1,10,500-proportional,3);
	lcd_print(2,9,500-integral,3);
	lcd_print(2,14,500-derivative,3);*/
	
	last_proportional = proportional; // Remember the last position.	
 7fa:	d0 93 1b 02 	sts	0x021B, r29
 7fe:	c0 93 1a 02 	sts	0x021A, r28
	correction = proportional*Kp + integral*Ki + derivative*Kd ;
 802:	c7 01       	movw	r24, r14
 804:	b6 01       	movw	r22, r12
 806:	20 91 08 02 	lds	r18, 0x0208
 80a:	30 91 09 02 	lds	r19, 0x0209
 80e:	40 91 0a 02 	lds	r20, 0x020A
 812:	50 91 0b 02 	lds	r21, 0x020B
 816:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
 81a:	6b 01       	movw	r12, r22
 81c:	7c 01       	movw	r14, r24
 81e:	81 2f       	mov	r24, r17
 820:	90 2f       	mov	r25, r16
 822:	a7 2d       	mov	r26, r7
 824:	b6 2d       	mov	r27, r6
 826:	bc 01       	movw	r22, r24
 828:	cd 01       	movw	r24, r26
 82a:	20 91 04 02 	lds	r18, 0x0204
 82e:	30 91 05 02 	lds	r19, 0x0205
 832:	40 91 06 02 	lds	r20, 0x0206
 836:	50 91 07 02 	lds	r21, 0x0207
 83a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
 83e:	9b 01       	movw	r18, r22
 840:	ac 01       	movw	r20, r24
 842:	c7 01       	movw	r24, r14
 844:	b6 01       	movw	r22, r12
 846:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 84a:	6b 01       	movw	r12, r22
 84c:	7c 01       	movw	r14, r24
 84e:	c5 01       	movw	r24, r10
 850:	b4 01       	movw	r22, r8
 852:	20 91 00 02 	lds	r18, 0x0200
 856:	30 91 01 02 	lds	r19, 0x0201
 85a:	40 91 02 02 	lds	r20, 0x0202
 85e:	50 91 03 02 	lds	r21, 0x0203
 862:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
 866:	9b 01       	movw	r18, r22
 868:	ac 01       	movw	r20, r24
 86a:	c7 01       	movw	r24, r14
 86c:	b6 01       	movw	r22, r12
 86e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
 872:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixsfsi>
 876:	60 93 28 02 	sts	0x0228, r22
 87a:	70 93 29 02 	sts	0x0229, r23
		
	return correction ;
	
}
 87e:	86 2f       	mov	r24, r22
 880:	97 2f       	mov	r25, r23
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	ff 90       	pop	r15
 88c:	ef 90       	pop	r14
 88e:	df 90       	pop	r13
 890:	cf 90       	pop	r12
 892:	bf 90       	pop	r11
 894:	af 90       	pop	r10
 896:	9f 90       	pop	r9
 898:	8f 90       	pop	r8
 89a:	7f 90       	pop	r7
 89c:	6f 90       	pop	r6
 89e:	08 95       	ret

000008a0 <SetTunings>:
void SetTunings()
{
	/*lcd_print(1,1,10*Kp,2);
	lcd_print(1,4,10*Ki,2);
	lcd_print(1,7,10*Kd,2);*/
}
 8a0:	08 95       	ret

000008a2 <main>:
  //Output - control left and right Motor speeds
  //Logic - add pid correction error here.
*/
int main()
{
	init_devices();
 8a2:	0e 94 93 03 	call	0x726	; 0x726 <init_devices>
	lcd_set_4bit();
 8a6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 8aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	signed int max = 250; 
	speed_L = 255;
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	90 93 41 02 	sts	0x0241, r25
 8b6:	80 93 40 02 	sts	0x0240, r24
	speed_R = 255;
 8ba:	90 93 59 02 	sts	0x0259, r25
 8be:	80 93 58 02 	sts	0x0258, r24
	
	while(1)
	{

		data_received [0] = ADC_Conversion(3);	//Getting data of sensor-0 WL Sensor
 8c2:	0f 2e       	mov	r0, r31
 8c4:	fe e2       	ldi	r31, 0x2E	; 46
 8c6:	2f 2e       	mov	r2, r31
 8c8:	f2 e0       	ldi	r31, 0x02	; 2
 8ca:	3f 2e       	mov	r3, r31
 8cc:	f0 2d       	mov	r31, r0
		lcd_print(2, 5,data_received [5], 3);
		lcd_print(2, 9,data_received [6], 3);
		*/
		SetTunings();
		
		sensor_value[0] = sensor_on_line(data_received [0]);
 8ce:	0f 2e       	mov	r0, r31
 8d0:	f8 e4       	ldi	r31, 0x48	; 72
 8d2:	4f 2e       	mov	r4, r31
 8d4:	f2 e0       	ldi	r31, 0x02	; 2
 8d6:	5f 2e       	mov	r5, r31
 8d8:	f0 2d       	mov	r31, r0
	speed_R = 255;
	
	while(1)
	{

		data_received [0] = ADC_Conversion(3);	//Getting data of sensor-0 WL Sensor
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
 8e0:	f1 01       	movw	r30, r2
 8e2:	80 83       	st	Z, r24
 8e4:	11 82       	std	Z+1, r1	; 0x01
		data_received [1] = ADC_Conversion(2);	//Getting data of sensor-1 WL Sensor
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
 8ec:	e0 e3       	ldi	r30, 0x30	; 48
 8ee:	f2 e0       	ldi	r31, 0x02	; 2
 8f0:	80 83       	st	Z, r24
 8f2:	10 92 31 02 	sts	0x0231, r1
		data_received [2] = ADC_Conversion(1);	//Getting data of sensor-2 WL Sensor
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
 8fc:	e2 e3       	ldi	r30, 0x32	; 50
 8fe:	f2 e0       	ldi	r31, 0x02	; 2
 900:	80 83       	st	Z, r24
 902:	10 92 33 02 	sts	0x0233, r1
        data_received [3] = spi_master_tx_and_rx(0); //Getting data of sensor-3 WL sensor connected to slave microcontroller.
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
 90c:	e4 e3       	ldi	r30, 0x34	; 52
 90e:	f2 e0       	ldi	r31, 0x02	; 2
 910:	80 83       	st	Z, r24
 912:	10 92 35 02 	sts	0x0235, r1
        data_received [4] = spi_master_tx_and_rx(1); //Getting data of sensor-4 WL sensor connected to slave microcontroller.
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
 91c:	e6 e3       	ldi	r30, 0x36	; 54
 91e:	f2 e0       	ldi	r31, 0x02	; 2
 920:	80 83       	st	Z, r24
 922:	10 92 37 02 	sts	0x0237, r1
        data_received [5] = spi_master_tx_and_rx(2); //Getting data of sensor-5 WL sensor connected to slave microcontroller.
 926:	82 e0       	ldi	r24, 0x02	; 2
 928:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
 92c:	e8 e3       	ldi	r30, 0x38	; 56
 92e:	f2 e0       	ldi	r31, 0x02	; 2
 930:	80 83       	st	Z, r24
 932:	10 92 39 02 	sts	0x0239, r1
		data_received [6] = spi_master_tx_and_rx(3); //Getting data of sensor-6 WL sensor connected to slave microcontroller.
 936:	83 e0       	ldi	r24, 0x03	; 3
 938:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
 93c:	c8 2f       	mov	r28, r24
 93e:	ea e3       	ldi	r30, 0x3A	; 58
 940:	f2 e0       	ldi	r31, 0x02	; 2
 942:	80 83       	st	Z, r24
 944:	10 92 3b 02 	sts	0x023B, r1
		lcd_print(2, 5,data_received [5], 3);
		lcd_print(2, 9,data_received [6], 3);
		*/
		SetTunings();
		
		sensor_value[0] = sensor_on_line(data_received [0]);
 948:	f1 01       	movw	r30, r2
 94a:	80 81       	ld	r24, Z
 94c:	91 81       	ldd	r25, Z+1	; 0x01
 94e:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 952:	08 2f       	mov	r16, r24
 954:	19 2f       	mov	r17, r25
 956:	f2 01       	movw	r30, r4
 958:	11 83       	std	Z+1, r17	; 0x01
 95a:	00 83       	st	Z, r16
		sensor_value[1] = sensor_on_line(data_received [1]);
 95c:	e0 e3       	ldi	r30, 0x30	; 48
 95e:	f2 e0       	ldi	r31, 0x02	; 2
 960:	80 81       	ld	r24, Z
 962:	91 81       	ldd	r25, Z+1	; 0x01
 964:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 968:	c8 2e       	mov	r12, r24
 96a:	d9 2e       	mov	r13, r25
 96c:	ea e4       	ldi	r30, 0x4A	; 74
 96e:	f2 e0       	ldi	r31, 0x02	; 2
 970:	d1 82       	std	Z+1, r13	; 0x01
 972:	c0 82       	st	Z, r12
		sensor_value[2] = sensor_on_line(data_received [2]);
 974:	e2 e3       	ldi	r30, 0x32	; 50
 976:	f2 e0       	ldi	r31, 0x02	; 2
 978:	80 81       	ld	r24, Z
 97a:	91 81       	ldd	r25, Z+1	; 0x01
 97c:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 980:	68 2e       	mov	r6, r24
 982:	79 2e       	mov	r7, r25
 984:	ec e4       	ldi	r30, 0x4C	; 76
 986:	f2 e0       	ldi	r31, 0x02	; 2
 988:	71 82       	std	Z+1, r7	; 0x01
 98a:	60 82       	st	Z, r6
		sensor_value[3] = sensor_on_line(data_received [3]);
 98c:	e4 e3       	ldi	r30, 0x34	; 52
 98e:	f2 e0       	ldi	r31, 0x02	; 2
 990:	80 81       	ld	r24, Z
 992:	91 81       	ldd	r25, Z+1	; 0x01
 994:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 998:	e8 2e       	mov	r14, r24
 99a:	f9 2e       	mov	r15, r25
 99c:	f2 01       	movw	r30, r4
 99e:	f7 82       	std	Z+7, r15	; 0x07
 9a0:	e6 82       	std	Z+6, r14	; 0x06
		sensor_value[4] = sensor_on_line(data_received [4]);
 9a2:	e6 e3       	ldi	r30, 0x36	; 54
 9a4:	f2 e0       	ldi	r31, 0x02	; 2
 9a6:	80 81       	ld	r24, Z
 9a8:	91 81       	ldd	r25, Z+1	; 0x01
 9aa:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 9ae:	a8 2e       	mov	r10, r24
 9b0:	b9 2e       	mov	r11, r25
 9b2:	f2 01       	movw	r30, r4
 9b4:	b1 86       	std	Z+9, r11	; 0x09
 9b6:	a0 86       	std	Z+8, r10	; 0x08
		sensor_value[5] = sensor_on_line(data_received [5]);
 9b8:	e8 e3       	ldi	r30, 0x38	; 56
 9ba:	f2 e0       	ldi	r31, 0x02	; 2
 9bc:	80 81       	ld	r24, Z
 9be:	91 81       	ldd	r25, Z+1	; 0x01
 9c0:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 9c4:	88 2e       	mov	r8, r24
 9c6:	99 2e       	mov	r9, r25
 9c8:	f2 01       	movw	r30, r4
 9ca:	93 86       	std	Z+11, r9	; 0x0b
 9cc:	82 86       	std	Z+10, r8	; 0x0a
		sensor_value[6] = sensor_on_line(data_received [6]);
 9ce:	8c 2f       	mov	r24, r28
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
 9d6:	48 2f       	mov	r20, r24
 9d8:	59 2f       	mov	r21, r25
 9da:	f2 01       	movw	r30, r4
 9dc:	55 87       	std	Z+13, r21	; 0x0d
 9de:	44 87       	std	Z+12, r20	; 0x0c
		/*senser_value_sum = data_received [0] + data_received [1] + data_received [2] + data_received [3] + data_received [4] + data_received [5] + data_received [6] ;
		
		weight = ((-3)*data_received [0] + (-2)*data_received [1] + (-1)*data_received [2] + (0)*data_received [3] + (1)*data_received [4] + (2)*data_received [5] + (3)*data_received [6]);
		*/
		
		senser_value_sum = sensor_value[0] + sensor_value[1] + sensor_value[2] + sensor_value[3] + sensor_value[4] + sensor_value[5] + sensor_value[6] ;
 9e0:	c6 01       	movw	r24, r12
 9e2:	80 0f       	add	r24, r16
 9e4:	91 1f       	adc	r25, r17
 9e6:	86 0d       	add	r24, r6
 9e8:	97 1d       	adc	r25, r7
 9ea:	8e 0d       	add	r24, r14
 9ec:	9f 1d       	adc	r25, r15
 9ee:	8a 0d       	add	r24, r10
 9f0:	9b 1d       	adc	r25, r11
 9f2:	88 0d       	add	r24, r8
 9f4:	99 1d       	adc	r25, r9
 9f6:	bc 01       	movw	r22, r24
 9f8:	64 0f       	add	r22, r20
 9fa:	75 1f       	adc	r23, r21
 9fc:	70 93 2d 02 	sts	0x022D, r23
 a00:	60 93 2c 02 	sts	0x022C, r22
		
		weight = 10*((-3)*sensor_value[0] + (-2)*sensor_value[1]+ (-1)*sensor_value[2] + (0)*sensor_value[3] + (1)*sensor_value[4] + (2)*sensor_value[5] + (3)*sensor_value[6]);
 a04:	c8 01       	movw	r24, r16
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	08 0f       	add	r16, r24
 a0c:	19 1f       	adc	r17, r25
 a0e:	88 27       	eor	r24, r24
 a10:	99 27       	eor	r25, r25
 a12:	8c 19       	sub	r24, r12
 a14:	9d 09       	sbc	r25, r13
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	80 1b       	sub	r24, r16
 a1c:	91 0b       	sbc	r25, r17
 a1e:	9c 01       	movw	r18, r24
 a20:	2a 0d       	add	r18, r10
 a22:	3b 1d       	adc	r19, r11
 a24:	ca 01       	movw	r24, r20
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	84 0f       	add	r24, r20
 a2c:	95 1f       	adc	r25, r21
 a2e:	28 0f       	add	r18, r24
 a30:	39 1f       	adc	r19, r25
 a32:	c4 01       	movw	r24, r8
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	82 0f       	add	r24, r18
 a3a:	93 1f       	adc	r25, r19
 a3c:	86 19       	sub	r24, r6
 a3e:	97 09       	sbc	r25, r7
 a40:	ac 01       	movw	r20, r24
 a42:	44 0f       	add	r20, r20
 a44:	55 1f       	adc	r21, r21
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	84 0f       	add	r24, r20
 a54:	95 1f       	adc	r25, r21
 a56:	90 93 57 02 	sts	0x0257, r25
 a5a:	80 93 56 02 	sts	0x0256, r24
		
		//control variable
		
		value_on_line = weight/senser_value_sum ;
 a5e:	0e 94 51 07 	call	0xea2	; 0xea2 <__divmodhi4>
 a62:	86 2f       	mov	r24, r22
 a64:	97 2f       	mov	r25, r23
 a66:	60 93 46 02 	sts	0x0246, r22
 a6a:	70 93 47 02 	sts	0x0247, r23
		lcd_print(2, 15,sensor_value[5], 1);
		lcd_print(2, 16,sensor_value[6], 1);
		*/
		
		
		pid = PID(value_on_line);
 a6e:	0e 94 aa 03 	call	0x754	; 0x754 <PID>
 a72:	90 93 11 02 	sts	0x0211, r25
 a76:	80 93 10 02 	sts	0x0210, r24
		
		//pid = PID(weight); 
		 
		if (pid <= -max)
 a7a:	ff ef       	ldi	r31, 0xFF	; 255
 a7c:	87 30       	cpi	r24, 0x07	; 7
 a7e:	9f 07       	cpc	r25, r31
 a80:	3c f4       	brge	.+14     	; 0xa90 <main+0x1ee>
		{
			pid = -max ;
 a82:	86 e0       	ldi	r24, 0x06	; 6
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	90 93 11 02 	sts	0x0211, r25
 a8a:	80 93 10 02 	sts	0x0210, r24
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <main+0x200>
		}
		
		if (pid >= max)
 a90:	8a 3f       	cpi	r24, 0xFA	; 250
 a92:	91 05       	cpc	r25, r1
 a94:	34 f0       	brlt	.+12     	; 0xaa2 <main+0x200>
		{
			pid = max;
 a96:	8a ef       	ldi	r24, 0xFA	; 250
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	90 93 11 02 	sts	0x0211, r25
 a9e:	80 93 10 02 	sts	0x0210, r24
		}
		
		if (senser_value_sum == 0)
 aa2:	80 91 2c 02 	lds	r24, 0x022C
 aa6:	90 91 2d 02 	lds	r25, 0x022D
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	19 f4       	brne	.+6      	; 0xab4 <main+0x212>
		{
			stop();
 aae:	0e 94 b0 02 	call	0x560	; 0x560 <stop>
 ab2:	13 cf       	rjmp	.-474    	; 0x8da <main+0x38>
		}
		else
		{
			if (pid == 0)
 ab4:	80 91 10 02 	lds	r24, 0x0210
 ab8:	90 91 11 02 	lds	r25, 0x0211
 abc:	00 97       	sbiw	r24, 0x00	; 0
 abe:	51 f4       	brne	.+20     	; 0xad4 <main+0x232>
			{
				//integral = 0;
				forward();
 ac0:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
				velocity(speed_L,speed_R);
 ac4:	e0 e4       	ldi	r30, 0x40	; 64
 ac6:	f2 e0       	ldi	r31, 0x02	; 2
 ac8:	80 81       	ld	r24, Z
 aca:	e8 e5       	ldi	r30, 0x58	; 88
 acc:	f2 e0       	ldi	r31, 0x02	; 2
 ace:	60 81       	ld	r22, Z
 ad0:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
				/*lcd_print(2,1,speed_L,3);
				lcd_print(2,5,speed_R,3);
				lcd_print(1,13,2000-pid, 4);*/
			}
			
			if(pid<0)
 ad4:	80 91 10 02 	lds	r24, 0x0210
 ad8:	90 91 11 02 	lds	r25, 0x0211
 adc:	99 23       	and	r25, r25
 ade:	fc f4       	brge	.+62     	; 0xb1e <main+0x27c>
			{
				if(pid > -180)
 ae0:	ff ef       	ldi	r31, 0xFF	; 255
 ae2:	8d 34       	cpi	r24, 0x4D	; 77
 ae4:	9f 07       	cpc	r25, r31
 ae6:	7c f0       	brlt	.+30     	; 0xb06 <main+0x264>
				{
					forward();
 ae8:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
					velocity(speed_L+pid,speed_R);
 aec:	e0 e1       	ldi	r30, 0x10	; 16
 aee:	f2 e0       	ldi	r31, 0x02	; 2
 af0:	90 81       	ld	r25, Z
 af2:	e0 e4       	ldi	r30, 0x40	; 64
 af4:	f2 e0       	ldi	r31, 0x02	; 2
 af6:	80 81       	ld	r24, Z
 af8:	89 0f       	add	r24, r25
 afa:	e8 e5       	ldi	r30, 0x58	; 88
 afc:	f2 e0       	ldi	r31, 0x02	; 2
 afe:	60 81       	ld	r22, Z
 b00:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
 b04:	0c c0       	rjmp	.+24     	; 0xb1e <main+0x27c>
						lcd_print(1,14,data_received [1], 3);
						if(data_received [1] < 50)
						{
							k=0;
						}*/
						left();
 b06:	0e 94 a8 02 	call	0x550	; 0x550 <left>
						velocity(speed_L-50,speed_R-50);
 b0a:	e0 e4       	ldi	r30, 0x40	; 64
 b0c:	f2 e0       	ldi	r31, 0x02	; 2
 b0e:	80 81       	ld	r24, Z
 b10:	e8 e5       	ldi	r30, 0x58	; 88
 b12:	f2 e0       	ldi	r31, 0x02	; 2
 b14:	60 81       	ld	r22, Z
 b16:	62 53       	subi	r22, 0x32	; 50
 b18:	82 53       	subi	r24, 0x32	; 50
 b1a:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
				
				}
							
			}
			
			if (pid>0)
 b1e:	80 91 10 02 	lds	r24, 0x0210
 b22:	90 91 11 02 	lds	r25, 0x0211
 b26:	18 16       	cp	r1, r24
 b28:	19 06       	cpc	r1, r25
 b2a:	0c f0       	brlt	.+2      	; 0xb2e <main+0x28c>
 b2c:	d6 ce       	rjmp	.-596    	; 0x8da <main+0x38>
			{
				if(pid<180)
 b2e:	84 3b       	cpi	r24, 0xB4	; 180
 b30:	91 05       	cpc	r25, r1
 b32:	7c f4       	brge	.+30     	; 0xb52 <main+0x2b0>
				{
					forward();
 b34:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
					velocity(speed_L,speed_R-pid);
 b38:	e8 e5       	ldi	r30, 0x58	; 88
 b3a:	f2 e0       	ldi	r31, 0x02	; 2
 b3c:	60 81       	ld	r22, Z
 b3e:	e0 e1       	ldi	r30, 0x10	; 16
 b40:	f2 e0       	ldi	r31, 0x02	; 2
 b42:	80 81       	ld	r24, Z
 b44:	68 1b       	sub	r22, r24
 b46:	e0 e4       	ldi	r30, 0x40	; 64
 b48:	f2 e0       	ldi	r31, 0x02	; 2
 b4a:	80 81       	ld	r24, Z
 b4c:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
 b50:	c4 ce       	rjmp	.-632    	; 0x8da <main+0x38>
						lcd_print(1,14,data_received[5], 3);
						if(data_received [5]<50)
						{
							k=0;
						}*/
						right();
 b52:	0e 94 ac 02 	call	0x558	; 0x558 <right>
						velocity(speed_L-50 , speed_R-50);
 b56:	e0 e4       	ldi	r30, 0x40	; 64
 b58:	f2 e0       	ldi	r31, 0x02	; 2
 b5a:	80 81       	ld	r24, Z
 b5c:	e8 e5       	ldi	r30, 0x58	; 88
 b5e:	f2 e0       	ldi	r31, 0x02	; 2
 b60:	60 81       	ld	r22, Z
 b62:	62 53       	subi	r22, 0x32	; 50
 b64:	82 53       	subi	r24, 0x32	; 50
 b66:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
 b6a:	b7 ce       	rjmp	.-658    	; 0x8da <main+0x38>

00000b6c <__subsf3>:
 b6c:	50 58       	subi	r21, 0x80	; 128

00000b6e <__addsf3>:
 b6e:	bb 27       	eor	r27, r27
 b70:	aa 27       	eor	r26, r26
 b72:	0e d0       	rcall	.+28     	; 0xb90 <__addsf3x>
 b74:	e5 c0       	rjmp	.+458    	; 0xd40 <__fp_round>
 b76:	d6 d0       	rcall	.+428    	; 0xd24 <__fp_pscA>
 b78:	30 f0       	brcs	.+12     	; 0xb86 <__addsf3+0x18>
 b7a:	db d0       	rcall	.+438    	; 0xd32 <__fp_pscB>
 b7c:	20 f0       	brcs	.+8      	; 0xb86 <__addsf3+0x18>
 b7e:	31 f4       	brne	.+12     	; 0xb8c <__addsf3+0x1e>
 b80:	9f 3f       	cpi	r25, 0xFF	; 255
 b82:	11 f4       	brne	.+4      	; 0xb88 <__addsf3+0x1a>
 b84:	1e f4       	brtc	.+6      	; 0xb8c <__addsf3+0x1e>
 b86:	cb c0       	rjmp	.+406    	; 0xd1e <__fp_nan>
 b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3+0x1e>
 b8a:	e0 95       	com	r30
 b8c:	e7 fb       	bst	r30, 7
 b8e:	c1 c0       	rjmp	.+386    	; 0xd12 <__fp_inf>

00000b90 <__addsf3x>:
 b90:	e9 2f       	mov	r30, r25
 b92:	e7 d0       	rcall	.+462    	; 0xd62 <__fp_split3>
 b94:	80 f3       	brcs	.-32     	; 0xb76 <__addsf3+0x8>
 b96:	ba 17       	cp	r27, r26
 b98:	62 07       	cpc	r22, r18
 b9a:	73 07       	cpc	r23, r19
 b9c:	84 07       	cpc	r24, r20
 b9e:	95 07       	cpc	r25, r21
 ba0:	18 f0       	brcs	.+6      	; 0xba8 <__addsf3x+0x18>
 ba2:	71 f4       	brne	.+28     	; 0xbc0 <__addsf3x+0x30>
 ba4:	9e f5       	brtc	.+102    	; 0xc0c <__addsf3x+0x7c>
 ba6:	ff c0       	rjmp	.+510    	; 0xda6 <__fp_zero>
 ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3x+0x1c>
 baa:	e0 95       	com	r30
 bac:	0b 2e       	mov	r0, r27
 bae:	ba 2f       	mov	r27, r26
 bb0:	a0 2d       	mov	r26, r0
 bb2:	0b 01       	movw	r0, r22
 bb4:	b9 01       	movw	r22, r18
 bb6:	90 01       	movw	r18, r0
 bb8:	0c 01       	movw	r0, r24
 bba:	ca 01       	movw	r24, r20
 bbc:	a0 01       	movw	r20, r0
 bbe:	11 24       	eor	r1, r1
 bc0:	ff 27       	eor	r31, r31
 bc2:	59 1b       	sub	r21, r25
 bc4:	99 f0       	breq	.+38     	; 0xbec <__addsf3x+0x5c>
 bc6:	59 3f       	cpi	r21, 0xF9	; 249
 bc8:	50 f4       	brcc	.+20     	; 0xbde <__addsf3x+0x4e>
 bca:	50 3e       	cpi	r21, 0xE0	; 224
 bcc:	68 f1       	brcs	.+90     	; 0xc28 <__addsf3x+0x98>
 bce:	1a 16       	cp	r1, r26
 bd0:	f0 40       	sbci	r31, 0x00	; 0
 bd2:	a2 2f       	mov	r26, r18
 bd4:	23 2f       	mov	r18, r19
 bd6:	34 2f       	mov	r19, r20
 bd8:	44 27       	eor	r20, r20
 bda:	58 5f       	subi	r21, 0xF8	; 248
 bdc:	f3 cf       	rjmp	.-26     	; 0xbc4 <__addsf3x+0x34>
 bde:	46 95       	lsr	r20
 be0:	37 95       	ror	r19
 be2:	27 95       	ror	r18
 be4:	a7 95       	ror	r26
 be6:	f0 40       	sbci	r31, 0x00	; 0
 be8:	53 95       	inc	r21
 bea:	c9 f7       	brne	.-14     	; 0xbde <__addsf3x+0x4e>
 bec:	7e f4       	brtc	.+30     	; 0xc0c <__addsf3x+0x7c>
 bee:	1f 16       	cp	r1, r31
 bf0:	ba 0b       	sbc	r27, r26
 bf2:	62 0b       	sbc	r22, r18
 bf4:	73 0b       	sbc	r23, r19
 bf6:	84 0b       	sbc	r24, r20
 bf8:	ba f0       	brmi	.+46     	; 0xc28 <__addsf3x+0x98>
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	a1 f0       	breq	.+40     	; 0xc26 <__addsf3x+0x96>
 bfe:	ff 0f       	add	r31, r31
 c00:	bb 1f       	adc	r27, r27
 c02:	66 1f       	adc	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	c2 f7       	brpl	.-16     	; 0xbfa <__addsf3x+0x6a>
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__addsf3x+0x98>
 c0c:	ba 0f       	add	r27, r26
 c0e:	62 1f       	adc	r22, r18
 c10:	73 1f       	adc	r23, r19
 c12:	84 1f       	adc	r24, r20
 c14:	48 f4       	brcc	.+18     	; 0xc28 <__addsf3x+0x98>
 c16:	87 95       	ror	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f7 95       	ror	r31
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	08 f0       	brcs	.+2      	; 0xc26 <__addsf3x+0x96>
 c24:	b3 cf       	rjmp	.-154    	; 0xb8c <__addsf3+0x1e>
 c26:	93 95       	inc	r25
 c28:	88 0f       	add	r24, r24
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0x9e>
 c2c:	99 27       	eor	r25, r25
 c2e:	ee 0f       	add	r30, r30
 c30:	97 95       	ror	r25
 c32:	87 95       	ror	r24
 c34:	08 95       	ret

00000c36 <__fixsfsi>:
 c36:	04 d0       	rcall	.+8      	; 0xc40 <__fixunssfsi>
 c38:	68 94       	set
 c3a:	b1 11       	cpse	r27, r1
 c3c:	b5 c0       	rjmp	.+362    	; 0xda8 <__fp_szero>
 c3e:	08 95       	ret

00000c40 <__fixunssfsi>:
 c40:	98 d0       	rcall	.+304    	; 0xd72 <__fp_splitA>
 c42:	88 f0       	brcs	.+34     	; 0xc66 <__fixunssfsi+0x26>
 c44:	9f 57       	subi	r25, 0x7F	; 127
 c46:	90 f0       	brcs	.+36     	; 0xc6c <__fixunssfsi+0x2c>
 c48:	b9 2f       	mov	r27, r25
 c4a:	99 27       	eor	r25, r25
 c4c:	b7 51       	subi	r27, 0x17	; 23
 c4e:	a0 f0       	brcs	.+40     	; 0xc78 <__fixunssfsi+0x38>
 c50:	d1 f0       	breq	.+52     	; 0xc86 <__fixunssfsi+0x46>
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	1a f0       	brmi	.+6      	; 0xc62 <__fixunssfsi+0x22>
 c5c:	ba 95       	dec	r27
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__fixunssfsi+0x12>
 c60:	12 c0       	rjmp	.+36     	; 0xc86 <__fixunssfsi+0x46>
 c62:	b1 30       	cpi	r27, 0x01	; 1
 c64:	81 f0       	breq	.+32     	; 0xc86 <__fixunssfsi+0x46>
 c66:	9f d0       	rcall	.+318    	; 0xda6 <__fp_zero>
 c68:	b1 e0       	ldi	r27, 0x01	; 1
 c6a:	08 95       	ret
 c6c:	9c c0       	rjmp	.+312    	; 0xda6 <__fp_zero>
 c6e:	67 2f       	mov	r22, r23
 c70:	78 2f       	mov	r23, r24
 c72:	88 27       	eor	r24, r24
 c74:	b8 5f       	subi	r27, 0xF8	; 248
 c76:	39 f0       	breq	.+14     	; 0xc86 <__fixunssfsi+0x46>
 c78:	b9 3f       	cpi	r27, 0xF9	; 249
 c7a:	cc f3       	brlt	.-14     	; 0xc6e <__fixunssfsi+0x2e>
 c7c:	86 95       	lsr	r24
 c7e:	77 95       	ror	r23
 c80:	67 95       	ror	r22
 c82:	b3 95       	inc	r27
 c84:	d9 f7       	brne	.-10     	; 0xc7c <__fixunssfsi+0x3c>
 c86:	3e f4       	brtc	.+14     	; 0xc96 <__fixunssfsi+0x56>
 c88:	90 95       	com	r25
 c8a:	80 95       	com	r24
 c8c:	70 95       	com	r23
 c8e:	61 95       	neg	r22
 c90:	7f 4f       	sbci	r23, 0xFF	; 255
 c92:	8f 4f       	sbci	r24, 0xFF	; 255
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	08 95       	ret

00000c98 <__floatunsisf>:
 c98:	e8 94       	clt
 c9a:	09 c0       	rjmp	.+18     	; 0xcae <__floatsisf+0x12>

00000c9c <__floatsisf>:
 c9c:	97 fb       	bst	r25, 7
 c9e:	3e f4       	brtc	.+14     	; 0xcae <__floatsisf+0x12>
 ca0:	90 95       	com	r25
 ca2:	80 95       	com	r24
 ca4:	70 95       	com	r23
 ca6:	61 95       	neg	r22
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	99 23       	and	r25, r25
 cb0:	a9 f0       	breq	.+42     	; 0xcdc <__floatsisf+0x40>
 cb2:	f9 2f       	mov	r31, r25
 cb4:	96 e9       	ldi	r25, 0x96	; 150
 cb6:	bb 27       	eor	r27, r27
 cb8:	93 95       	inc	r25
 cba:	f6 95       	lsr	r31
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b7 95       	ror	r27
 cc4:	f1 11       	cpse	r31, r1
 cc6:	f8 cf       	rjmp	.-16     	; 0xcb8 <__floatsisf+0x1c>
 cc8:	fa f4       	brpl	.+62     	; 0xd08 <__floatsisf+0x6c>
 cca:	bb 0f       	add	r27, r27
 ccc:	11 f4       	brne	.+4      	; 0xcd2 <__floatsisf+0x36>
 cce:	60 ff       	sbrs	r22, 0
 cd0:	1b c0       	rjmp	.+54     	; 0xd08 <__floatsisf+0x6c>
 cd2:	6f 5f       	subi	r22, 0xFF	; 255
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	16 c0       	rjmp	.+44     	; 0xd08 <__floatsisf+0x6c>
 cdc:	88 23       	and	r24, r24
 cde:	11 f0       	breq	.+4      	; 0xce4 <__floatsisf+0x48>
 ce0:	96 e9       	ldi	r25, 0x96	; 150
 ce2:	11 c0       	rjmp	.+34     	; 0xd06 <__floatsisf+0x6a>
 ce4:	77 23       	and	r23, r23
 ce6:	21 f0       	breq	.+8      	; 0xcf0 <__floatsisf+0x54>
 ce8:	9e e8       	ldi	r25, 0x8E	; 142
 cea:	87 2f       	mov	r24, r23
 cec:	76 2f       	mov	r23, r22
 cee:	05 c0       	rjmp	.+10     	; 0xcfa <__floatsisf+0x5e>
 cf0:	66 23       	and	r22, r22
 cf2:	71 f0       	breq	.+28     	; 0xd10 <__floatsisf+0x74>
 cf4:	96 e8       	ldi	r25, 0x86	; 134
 cf6:	86 2f       	mov	r24, r22
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	2a f0       	brmi	.+10     	; 0xd08 <__floatsisf+0x6c>
 cfe:	9a 95       	dec	r25
 d00:	66 0f       	add	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	da f7       	brpl	.-10     	; 0xcfe <__floatsisf+0x62>
 d08:	88 0f       	add	r24, r24
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__fp_inf>:
 d12:	97 f9       	bld	r25, 7
 d14:	9f 67       	ori	r25, 0x7F	; 127
 d16:	80 e8       	ldi	r24, 0x80	; 128
 d18:	70 e0       	ldi	r23, 0x00	; 0
 d1a:	60 e0       	ldi	r22, 0x00	; 0
 d1c:	08 95       	ret

00000d1e <__fp_nan>:
 d1e:	9f ef       	ldi	r25, 0xFF	; 255
 d20:	80 ec       	ldi	r24, 0xC0	; 192
 d22:	08 95       	ret

00000d24 <__fp_pscA>:
 d24:	00 24       	eor	r0, r0
 d26:	0a 94       	dec	r0
 d28:	16 16       	cp	r1, r22
 d2a:	17 06       	cpc	r1, r23
 d2c:	18 06       	cpc	r1, r24
 d2e:	09 06       	cpc	r0, r25
 d30:	08 95       	ret

00000d32 <__fp_pscB>:
 d32:	00 24       	eor	r0, r0
 d34:	0a 94       	dec	r0
 d36:	12 16       	cp	r1, r18
 d38:	13 06       	cpc	r1, r19
 d3a:	14 06       	cpc	r1, r20
 d3c:	05 06       	cpc	r0, r21
 d3e:	08 95       	ret

00000d40 <__fp_round>:
 d40:	09 2e       	mov	r0, r25
 d42:	03 94       	inc	r0
 d44:	00 0c       	add	r0, r0
 d46:	11 f4       	brne	.+4      	; 0xd4c <__fp_round+0xc>
 d48:	88 23       	and	r24, r24
 d4a:	52 f0       	brmi	.+20     	; 0xd60 <__fp_round+0x20>
 d4c:	bb 0f       	add	r27, r27
 d4e:	40 f4       	brcc	.+16     	; 0xd60 <__fp_round+0x20>
 d50:	bf 2b       	or	r27, r31
 d52:	11 f4       	brne	.+4      	; 0xd58 <__fp_round+0x18>
 d54:	60 ff       	sbrs	r22, 0
 d56:	04 c0       	rjmp	.+8      	; 0xd60 <__fp_round+0x20>
 d58:	6f 5f       	subi	r22, 0xFF	; 255
 d5a:	7f 4f       	sbci	r23, 0xFF	; 255
 d5c:	8f 4f       	sbci	r24, 0xFF	; 255
 d5e:	9f 4f       	sbci	r25, 0xFF	; 255
 d60:	08 95       	ret

00000d62 <__fp_split3>:
 d62:	57 fd       	sbrc	r21, 7
 d64:	90 58       	subi	r25, 0x80	; 128
 d66:	44 0f       	add	r20, r20
 d68:	55 1f       	adc	r21, r21
 d6a:	59 f0       	breq	.+22     	; 0xd82 <__fp_splitA+0x10>
 d6c:	5f 3f       	cpi	r21, 0xFF	; 255
 d6e:	71 f0       	breq	.+28     	; 0xd8c <__fp_splitA+0x1a>
 d70:	47 95       	ror	r20

00000d72 <__fp_splitA>:
 d72:	88 0f       	add	r24, r24
 d74:	97 fb       	bst	r25, 7
 d76:	99 1f       	adc	r25, r25
 d78:	61 f0       	breq	.+24     	; 0xd92 <__fp_splitA+0x20>
 d7a:	9f 3f       	cpi	r25, 0xFF	; 255
 d7c:	79 f0       	breq	.+30     	; 0xd9c <__fp_splitA+0x2a>
 d7e:	87 95       	ror	r24
 d80:	08 95       	ret
 d82:	12 16       	cp	r1, r18
 d84:	13 06       	cpc	r1, r19
 d86:	14 06       	cpc	r1, r20
 d88:	55 1f       	adc	r21, r21
 d8a:	f2 cf       	rjmp	.-28     	; 0xd70 <__fp_split3+0xe>
 d8c:	46 95       	lsr	r20
 d8e:	f1 df       	rcall	.-30     	; 0xd72 <__fp_splitA>
 d90:	08 c0       	rjmp	.+16     	; 0xda2 <__fp_splitA+0x30>
 d92:	16 16       	cp	r1, r22
 d94:	17 06       	cpc	r1, r23
 d96:	18 06       	cpc	r1, r24
 d98:	99 1f       	adc	r25, r25
 d9a:	f1 cf       	rjmp	.-30     	; 0xd7e <__fp_splitA+0xc>
 d9c:	86 95       	lsr	r24
 d9e:	71 05       	cpc	r23, r1
 da0:	61 05       	cpc	r22, r1
 da2:	08 94       	sec
 da4:	08 95       	ret

00000da6 <__fp_zero>:
 da6:	e8 94       	clt

00000da8 <__fp_szero>:
 da8:	bb 27       	eor	r27, r27
 daa:	66 27       	eor	r22, r22
 dac:	77 27       	eor	r23, r23
 dae:	cb 01       	movw	r24, r22
 db0:	97 f9       	bld	r25, 7
 db2:	08 95       	ret

00000db4 <__mulsf3>:
 db4:	0b d0       	rcall	.+22     	; 0xdcc <__mulsf3x>
 db6:	c4 cf       	rjmp	.-120    	; 0xd40 <__fp_round>
 db8:	b5 df       	rcall	.-150    	; 0xd24 <__fp_pscA>
 dba:	28 f0       	brcs	.+10     	; 0xdc6 <__mulsf3+0x12>
 dbc:	ba df       	rcall	.-140    	; 0xd32 <__fp_pscB>
 dbe:	18 f0       	brcs	.+6      	; 0xdc6 <__mulsf3+0x12>
 dc0:	95 23       	and	r25, r21
 dc2:	09 f0       	breq	.+2      	; 0xdc6 <__mulsf3+0x12>
 dc4:	a6 cf       	rjmp	.-180    	; 0xd12 <__fp_inf>
 dc6:	ab cf       	rjmp	.-170    	; 0xd1e <__fp_nan>
 dc8:	11 24       	eor	r1, r1
 dca:	ee cf       	rjmp	.-36     	; 0xda8 <__fp_szero>

00000dcc <__mulsf3x>:
 dcc:	ca df       	rcall	.-108    	; 0xd62 <__fp_split3>
 dce:	a0 f3       	brcs	.-24     	; 0xdb8 <__mulsf3+0x4>

00000dd0 <__mulsf3_pse>:
 dd0:	95 9f       	mul	r25, r21
 dd2:	d1 f3       	breq	.-12     	; 0xdc8 <__mulsf3+0x14>
 dd4:	95 0f       	add	r25, r21
 dd6:	50 e0       	ldi	r21, 0x00	; 0
 dd8:	55 1f       	adc	r21, r21
 dda:	62 9f       	mul	r22, r18
 ddc:	f0 01       	movw	r30, r0
 dde:	72 9f       	mul	r23, r18
 de0:	bb 27       	eor	r27, r27
 de2:	f0 0d       	add	r31, r0
 de4:	b1 1d       	adc	r27, r1
 de6:	63 9f       	mul	r22, r19
 de8:	aa 27       	eor	r26, r26
 dea:	f0 0d       	add	r31, r0
 dec:	b1 1d       	adc	r27, r1
 dee:	aa 1f       	adc	r26, r26
 df0:	64 9f       	mul	r22, r20
 df2:	66 27       	eor	r22, r22
 df4:	b0 0d       	add	r27, r0
 df6:	a1 1d       	adc	r26, r1
 df8:	66 1f       	adc	r22, r22
 dfa:	82 9f       	mul	r24, r18
 dfc:	22 27       	eor	r18, r18
 dfe:	b0 0d       	add	r27, r0
 e00:	a1 1d       	adc	r26, r1
 e02:	62 1f       	adc	r22, r18
 e04:	73 9f       	mul	r23, r19
 e06:	b0 0d       	add	r27, r0
 e08:	a1 1d       	adc	r26, r1
 e0a:	62 1f       	adc	r22, r18
 e0c:	83 9f       	mul	r24, r19
 e0e:	a0 0d       	add	r26, r0
 e10:	61 1d       	adc	r22, r1
 e12:	22 1f       	adc	r18, r18
 e14:	74 9f       	mul	r23, r20
 e16:	33 27       	eor	r19, r19
 e18:	a0 0d       	add	r26, r0
 e1a:	61 1d       	adc	r22, r1
 e1c:	23 1f       	adc	r18, r19
 e1e:	84 9f       	mul	r24, r20
 e20:	60 0d       	add	r22, r0
 e22:	21 1d       	adc	r18, r1
 e24:	82 2f       	mov	r24, r18
 e26:	76 2f       	mov	r23, r22
 e28:	6a 2f       	mov	r22, r26
 e2a:	11 24       	eor	r1, r1
 e2c:	9f 57       	subi	r25, 0x7F	; 127
 e2e:	50 40       	sbci	r21, 0x00	; 0
 e30:	8a f0       	brmi	.+34     	; 0xe54 <__mulsf3_pse+0x84>
 e32:	e1 f0       	breq	.+56     	; 0xe6c <__mulsf3_pse+0x9c>
 e34:	88 23       	and	r24, r24
 e36:	4a f0       	brmi	.+18     	; 0xe4a <__mulsf3_pse+0x7a>
 e38:	ee 0f       	add	r30, r30
 e3a:	ff 1f       	adc	r31, r31
 e3c:	bb 1f       	adc	r27, r27
 e3e:	66 1f       	adc	r22, r22
 e40:	77 1f       	adc	r23, r23
 e42:	88 1f       	adc	r24, r24
 e44:	91 50       	subi	r25, 0x01	; 1
 e46:	50 40       	sbci	r21, 0x00	; 0
 e48:	a9 f7       	brne	.-22     	; 0xe34 <__mulsf3_pse+0x64>
 e4a:	9e 3f       	cpi	r25, 0xFE	; 254
 e4c:	51 05       	cpc	r21, r1
 e4e:	70 f0       	brcs	.+28     	; 0xe6c <__mulsf3_pse+0x9c>
 e50:	60 cf       	rjmp	.-320    	; 0xd12 <__fp_inf>
 e52:	aa cf       	rjmp	.-172    	; 0xda8 <__fp_szero>
 e54:	5f 3f       	cpi	r21, 0xFF	; 255
 e56:	ec f3       	brlt	.-6      	; 0xe52 <__mulsf3_pse+0x82>
 e58:	98 3e       	cpi	r25, 0xE8	; 232
 e5a:	dc f3       	brlt	.-10     	; 0xe52 <__mulsf3_pse+0x82>
 e5c:	86 95       	lsr	r24
 e5e:	77 95       	ror	r23
 e60:	67 95       	ror	r22
 e62:	b7 95       	ror	r27
 e64:	f7 95       	ror	r31
 e66:	e7 95       	ror	r30
 e68:	9f 5f       	subi	r25, 0xFF	; 255
 e6a:	c1 f7       	brne	.-16     	; 0xe5c <__mulsf3_pse+0x8c>
 e6c:	fe 2b       	or	r31, r30
 e6e:	88 0f       	add	r24, r24
 e70:	91 1d       	adc	r25, r1
 e72:	96 95       	lsr	r25
 e74:	87 95       	ror	r24
 e76:	97 f9       	bld	r25, 7
 e78:	08 95       	ret

00000e7a <__udivmodhi4>:
 e7a:	aa 1b       	sub	r26, r26
 e7c:	bb 1b       	sub	r27, r27
 e7e:	51 e1       	ldi	r21, 0x11	; 17
 e80:	07 c0       	rjmp	.+14     	; 0xe90 <__udivmodhi4_ep>

00000e82 <__udivmodhi4_loop>:
 e82:	aa 1f       	adc	r26, r26
 e84:	bb 1f       	adc	r27, r27
 e86:	a6 17       	cp	r26, r22
 e88:	b7 07       	cpc	r27, r23
 e8a:	10 f0       	brcs	.+4      	; 0xe90 <__udivmodhi4_ep>
 e8c:	a6 1b       	sub	r26, r22
 e8e:	b7 0b       	sbc	r27, r23

00000e90 <__udivmodhi4_ep>:
 e90:	88 1f       	adc	r24, r24
 e92:	99 1f       	adc	r25, r25
 e94:	5a 95       	dec	r21
 e96:	a9 f7       	brne	.-22     	; 0xe82 <__udivmodhi4_loop>
 e98:	80 95       	com	r24
 e9a:	90 95       	com	r25
 e9c:	bc 01       	movw	r22, r24
 e9e:	cd 01       	movw	r24, r26
 ea0:	08 95       	ret

00000ea2 <__divmodhi4>:
 ea2:	97 fb       	bst	r25, 7
 ea4:	09 2e       	mov	r0, r25
 ea6:	07 26       	eor	r0, r23
 ea8:	0a d0       	rcall	.+20     	; 0xebe <__divmodhi4_neg1>
 eaa:	77 fd       	sbrc	r23, 7
 eac:	04 d0       	rcall	.+8      	; 0xeb6 <__divmodhi4_neg2>
 eae:	e5 df       	rcall	.-54     	; 0xe7a <__udivmodhi4>
 eb0:	06 d0       	rcall	.+12     	; 0xebe <__divmodhi4_neg1>
 eb2:	00 20       	and	r0, r0
 eb4:	1a f4       	brpl	.+6      	; 0xebc <__divmodhi4_exit>

00000eb6 <__divmodhi4_neg2>:
 eb6:	70 95       	com	r23
 eb8:	61 95       	neg	r22
 eba:	7f 4f       	sbci	r23, 0xFF	; 255

00000ebc <__divmodhi4_exit>:
 ebc:	08 95       	ret

00000ebe <__divmodhi4_neg1>:
 ebe:	f6 f7       	brtc	.-4      	; 0xebc <__divmodhi4_exit>
 ec0:	90 95       	com	r25
 ec2:	81 95       	neg	r24
 ec4:	9f 4f       	sbci	r25, 0xFF	; 255
 ec6:	08 95       	ret

00000ec8 <_exit>:
 ec8:	f8 94       	cli

00000eca <__stop_program>:
 eca:	ff cf       	rjmp	.-2      	; 0xeca <__stop_program>
