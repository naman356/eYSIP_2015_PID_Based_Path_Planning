
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800206  00800206  00001046  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112c  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f3  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000687  00000000  00000000  00004b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  000051c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000582  00000000  00000000  00005905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ea       	ldi	r30, 0xAC	; 172
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 36       	cpi	r26, 0x6A	; 106
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <main>
 122:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1d4:	82 95       	swap	r24
 1d6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1de:	98 b1       	in	r25, 0x08	; 8
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 25 02 	sts	0x0225, r25
 30e:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 2d 02 	sts	0x022D, r23
 32e:	60 93 2c 02 	sts	0x022C, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 4f 02 	sts	0x024F, r25
 340:	80 93 4e 02 	sts	0x024E, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 2d 02 	sts	0x022D, r23
 368:	60 93 2c 02 	sts	0x022C, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 3b 02 	sts	0x023B, r25
 37a:	80 93 3a 02 	sts	0x023A, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 2d 02 	sts	0x022D, r23
 3a0:	60 93 2c 02 	sts	0x022C, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 34 02 	sts	0x0234, r25
 3b0:	80 93 33 02 	sts	0x0233, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 4d 02 	sts	0x024D, r25
 3d4:	80 93 4c 02 	sts	0x024C, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <spi_pin_config>:
float Kp=4, Ki=0 ,Kd=0 ,integral,derivative;


void spi_pin_config (void)
{
	DDRB = DDRB | 0x07;
 3f2:	84 b1       	in	r24, 0x04	; 4
 3f4:	87 60       	ori	r24, 0x07	; 7
 3f6:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0x07;
 3f8:	85 b1       	in	r24, 0x05	; 5
 3fa:	87 60       	ori	r24, 0x07	; 7
 3fc:	85 b9       	out	0x05, r24	; 5
}
 3fe:	08 95       	ret

00000400 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 400:	87 b1       	in	r24, 0x07	; 7
 402:	87 6f       	ori	r24, 0xF7	; 247
 404:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 406:	88 b1       	in	r24, 0x08	; 8
 408:	80 78       	andi	r24, 0x80	; 128
 40a:	88 b9       	out	0x08, r24	; 8
}
 40c:	08 95       	ret

0000040e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00; 
 40e:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
 410:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
 412:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
 416:	10 92 08 01 	sts	0x0108, r1
}
 41a:	08 95       	ret

0000041c <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
	DDRA = DDRA | 0x0F;
 41c:	81 b1       	in	r24, 0x01	; 1
 41e:	8f 60       	ori	r24, 0x0F	; 15
 420:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 422:	82 b1       	in	r24, 0x02	; 2
 424:	80 7f       	andi	r24, 0xF0	; 240
 426:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 428:	ea e0       	ldi	r30, 0x0A	; 10
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	80 81       	ld	r24, Z
 42e:	88 61       	ori	r24, 0x18	; 24
 430:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 432:	eb e0       	ldi	r30, 0x0B	; 11
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	80 81       	ld	r24, Z
 438:	88 61       	ori	r24, 0x18	; 24
 43a:	80 83       	st	Z, r24
}
 43c:	08 95       	ret

0000043e <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 43e:	0e 94 00 02 	call	0x400	; 0x400 <lcd_port_config>
		adc_pin_config();
 442:	0e 94 07 02 	call	0x40e	; 0x40e <adc_pin_config>
	motion_pin_config();
 446:	0e 94 0e 02 	call	0x41c	; 0x41c <motion_pin_config>
	spi_pin_config();	
 44a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <spi_pin_config>
}
 44e:	08 95       	ret

00000450 <spi_init>:

//Function To Initialize SPI bus
// clock rate: 921600hz
void spi_init(void)
{
	SPCR = 0x53; //setup SPI
 450:	83 e5       	ldi	r24, 0x53	; 83
 452:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; //setup SPI
 454:	1d bc       	out	0x2d, r1	; 45
	SPDR = 0x00;
 456:	1e bc       	out	0x2e, r1	; 46
}
 458:	08 95       	ret

0000045a <spi_master_tx_and_rx>:
*/
unsigned char spi_master_tx_and_rx (unsigned char data)
{
	unsigned char rx_data = 0;

	PORTB = PORTB & 0xFE; // make SS pin low
 45a:	28 98       	cbi	0x05, 0	; 5
	SPDR = data;
 45c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data transmission to complete
 45e:	0d b4       	in	r0, 0x2d	; 45
 460:	07 fe       	sbrs	r0, 7
 462:	fd cf       	rjmp	.-6      	; 0x45e <spi_master_tx_and_rx+0x4>
 464:	86 e6       	ldi	r24, 0x66	; 102
 466:	9e e0       	ldi	r25, 0x0E	; 14
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <spi_master_tx_and_rx+0xe>
 46c:	00 00       	nop

	_delay_ms(1); //time for ADC conversion in the slave microcontroller
	
	SPDR = 0x50; // send dummy byte to read back data from the slave microcontroller
 46e:	80 e5       	ldi	r24, 0x50	; 80
 470:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data reception to complete
 472:	0d b4       	in	r0, 0x2d	; 45
 474:	07 fe       	sbrs	r0, 7
 476:	fd cf       	rjmp	.-6      	; 0x472 <spi_master_tx_and_rx+0x18>
	rx_data = SPDR;
 478:	8e b5       	in	r24, 0x2e	; 46
	PORTB = PORTB | 0x01; // make SS high
 47a:	28 9a       	sbi	0x05, 0	; 5
	return rx_data;
}
 47c:	08 95       	ret

0000047e <timer5_init>:
  // PWM 8bit fast, TOP=0x00FF
  // Timer Frequency:225.000Hz
*/
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 47e:	e1 e2       	ldi	r30, 0x21	; 33
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 490:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 494:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 498:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 49c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 4a0:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 4a4:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 4a8:	89 ea       	ldi	r24, 0xA9	; 169
 4aa:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 4ae:	8b e0       	ldi	r24, 0x0B	; 11
 4b0:	80 83       	st	Z, r24
}
 4b2:	08 95       	ret

000004b4 <adc_init>:
/*
  //Function Name -  adc_init
*/
void adc_init()
{
	ADCSRA = 0x00;
 4b4:	ea e7       	ldi	r30, 0x7A	; 122
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 4ba:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 4be:	80 e2       	ldi	r24, 0x20	; 32
 4c0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 4c8:	86 e8       	ldi	r24, 0x86	; 134
 4ca:	80 83       	st	Z, r24
}
 4cc:	08 95       	ret

000004ce <ADC_Conversion>:
  //Logic - convert sensor values to digital
*/
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 4ce:	88 30       	cpi	r24, 0x08	; 8
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <ADC_Conversion+0xa>
	{
 		ADCSRB = 0x08;
 4d2:	98 e0       	ldi	r25, 0x08	; 8
 4d4:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 4d8:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4e0:	ea e7       	ldi	r30, 0x7A	; 122
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 4ea:	80 81       	ld	r24, Z
 4ec:	84 ff       	sbrs	r24, 4
 4ee:	fd cf       	rjmp	.-6      	; 0x4ea <ADC_Conversion+0x1c>
	a=ADCH;
 4f0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4f4:	ea e7       	ldi	r30, 0x7A	; 122
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	90 81       	ld	r25, Z
 4fa:	90 61       	ori	r25, 0x10	; 16
 4fc:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 4fe:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 502:	08 95       	ret

00000504 <print_sensor>:
/*
  //Function Name -  print_sensor
  //Logic - print values on desired row and column
*/
int print_sensor(char row, char coloumn,unsigned char channel)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	d8 2f       	mov	r29, r24
 50a:	c6 2f       	mov	r28, r22
 50c:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
 50e:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
 512:	48 2f       	mov	r20, r24
 514:	80 93 2e 02 	sts	0x022E, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 518:	8d 2f       	mov	r24, r29
 51a:	6c 2f       	mov	r22, r28
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	23 e0       	ldi	r18, 0x03	; 3
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	
	return ADC_Value ;
}
 526:	80 91 2e 02 	lds	r24, 0x022E
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <velocity>:
  //Function Name -  velocity
  //Logic - control velocity of motors
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 532:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 536:	60 93 2a 01 	sts	0x012A, r22
}
 53a:	08 95       	ret

0000053c <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
 53c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 53e:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
 540:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 542:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
 544:	92 b9       	out	0x02, r25	; 2
}
 546:	08 95       	ret

00000548 <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 54e:	08 95       	ret

00000550 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 550:	89 e0       	ldi	r24, 0x09	; 9
 552:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 556:	08 95       	ret

00000558 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 55e:	08 95       	ret

00000560 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 560:	8a e0       	ldi	r24, 0x0A	; 10
 562:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 566:	08 95       	ret

00000568 <fast_left>:

void fast_left(void)
{
	motion_set(0x05);
 568:	85 e0       	ldi	r24, 0x05	; 5
 56a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 56e:	08 95       	ret

00000570 <fast_right>:

void fast_right(void)
{
	
	motion_set(0x0A);
 570:	8a e0       	ldi	r24, 0x0A	; 10
 572:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 576:	08 95       	ret

00000578 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
 578:	84 e0       	ldi	r24, 0x04	; 4
 57a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 57e:	08 95       	ret

00000580 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 586:	08 95       	ret

00000588 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 58e:	08 95       	ret

00000590 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 596:	08 95       	ret

00000598 <stop>:


void stop (void) //hard stop
{
	motion_set(0x00);
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
 59e:	08 95       	ret

000005a0 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 5a0:	e1 ec       	ldi	r30, 0xC1	; 193
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 5a6:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 5b0:	8f e5       	ldi	r24, 0x5F	; 95
 5b2:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 5b6:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 5ba:	88 e9       	ldi	r24, 0x98	; 152
 5bc:	80 83       	st	Z, r24
}
 5be:	08 95       	ret

000005c0 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	0b b6       	in	r0, 0x3b	; 59
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 5e6:	e6 ec       	ldi	r30, 0xC6	; 198
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	80 93 37 02 	sts	0x0237, r24

	UDR0 = data; 				//echo data back to PC
 5f0:	80 83       	st	Z, r24
	//lcd_print(1,1,data,3);
	
	lcd_print(1,9,c++,1);
 5f2:	40 91 18 02 	lds	r20, 0x0218
 5f6:	50 91 19 02 	lds	r21, 0x0219
 5fa:	ca 01       	movw	r24, r20
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	90 93 19 02 	sts	0x0219, r25
 602:	80 93 18 02 	sts	0x0218, r24
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	69 e0       	ldi	r22, 0x09	; 9
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	if(i==0)
 612:	80 91 16 02 	lds	r24, 0x0216
 616:	90 91 17 02 	lds	r25, 0x0217
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	09 f0       	breq	.+2      	; 0x620 <__vector_25+0x60>
 61e:	6e c0       	rjmp	.+220    	; 0x6fc <__vector_25+0x13c>
	{
		i = i+1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	90 93 17 02 	sts	0x0217, r25
 628:	80 93 16 02 	sts	0x0216, r24
		switch(data)
 62c:	80 91 37 02 	lds	r24, 0x0237
 630:	84 33       	cpi	r24, 0x34	; 52
 632:	d1 f1       	breq	.+116    	; 0x6a8 <__vector_25+0xe8>
 634:	85 33       	cpi	r24, 0x35	; 53
 636:	70 f4       	brcc	.+28     	; 0x654 <__vector_25+0x94>
 638:	81 33       	cpi	r24, 0x31	; 49
 63a:	09 f1       	breq	.+66     	; 0x67e <__vector_25+0xbe>
 63c:	82 33       	cpi	r24, 0x32	; 50
 63e:	20 f4       	brcc	.+8      	; 0x648 <__vector_25+0x88>
 640:	80 33       	cpi	r24, 0x30	; 48
 642:	09 f0       	breq	.+2      	; 0x646 <__vector_25+0x86>
 644:	83 c1       	rjmp	.+774    	; 0x94c <__vector_25+0x38c>
 646:	16 c0       	rjmp	.+44     	; 0x674 <__vector_25+0xb4>
 648:	82 33       	cpi	r24, 0x32	; 50
 64a:	01 f1       	breq	.+64     	; 0x68c <__vector_25+0xcc>
 64c:	83 33       	cpi	r24, 0x33	; 51
 64e:	09 f0       	breq	.+2      	; 0x652 <__vector_25+0x92>
 650:	7d c1       	rjmp	.+762    	; 0x94c <__vector_25+0x38c>
 652:	23 c0       	rjmp	.+70     	; 0x69a <__vector_25+0xda>
 654:	87 33       	cpi	r24, 0x37	; 55
 656:	e9 f1       	breq	.+122    	; 0x6d2 <__vector_25+0x112>
 658:	88 33       	cpi	r24, 0x38	; 56
 65a:	30 f4       	brcc	.+12     	; 0x668 <__vector_25+0xa8>
 65c:	85 33       	cpi	r24, 0x35	; 53
 65e:	59 f1       	breq	.+86     	; 0x6b6 <__vector_25+0xf6>
 660:	86 33       	cpi	r24, 0x36	; 54
 662:	09 f0       	breq	.+2      	; 0x666 <__vector_25+0xa6>
 664:	73 c1       	rjmp	.+742    	; 0x94c <__vector_25+0x38c>
 666:	2e c0       	rjmp	.+92     	; 0x6c4 <__vector_25+0x104>
 668:	88 33       	cpi	r24, 0x38	; 56
 66a:	d1 f1       	breq	.+116    	; 0x6e0 <__vector_25+0x120>
 66c:	89 33       	cpi	r24, 0x39	; 57
 66e:	09 f0       	breq	.+2      	; 0x672 <__vector_25+0xb2>
 670:	6d c1       	rjmp	.+730    	; 0x94c <__vector_25+0x38c>
 672:	3d c0       	rjmp	.+122    	; 0x6ee <__vector_25+0x12e>
		{
			case (48): data1 = 0; break; //lcd_cursor(1,2); lcd_string("0"); lcd_print(2,2,i,1); break;
 674:	10 92 15 02 	sts	0x0215, r1
 678:	10 92 14 02 	sts	0x0214, r1
 67c:	67 c1       	rjmp	.+718    	; 0x94c <__vector_25+0x38c>
			case (49): data1 = 1; break; //lcd_cursor(1,2); lcd_string("1"); lcd_print(2,2,i,1); break;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	90 93 15 02 	sts	0x0215, r25
 686:	80 93 14 02 	sts	0x0214, r24
 68a:	60 c1       	rjmp	.+704    	; 0x94c <__vector_25+0x38c>
			case (50): data1 = 2; break; //lcd_cursor(1,2); lcd_string("2"); lcd_print(2,2,i,1); break;
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	90 93 15 02 	sts	0x0215, r25
 694:	80 93 14 02 	sts	0x0214, r24
 698:	59 c1       	rjmp	.+690    	; 0x94c <__vector_25+0x38c>
			case (51): data1 = 3; break; //lcd_cursor(1,2); lcd_string("3"); lcd_print(2,2,i,1); break;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 15 02 	sts	0x0215, r25
 6a2:	80 93 14 02 	sts	0x0214, r24
 6a6:	52 c1       	rjmp	.+676    	; 0x94c <__vector_25+0x38c>
			case (52): data1 = 4; break; //lcd_cursor(1,2); lcd_string("4"); lcd_print(2,2,i,1); break;
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 15 02 	sts	0x0215, r25
 6b0:	80 93 14 02 	sts	0x0214, r24
 6b4:	4b c1       	rjmp	.+662    	; 0x94c <__vector_25+0x38c>
			case (53): data1 = 5; break; //lcd_cursor(1,2); lcd_string("5"); lcd_print(2,2,i,1); break;
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	90 93 15 02 	sts	0x0215, r25
 6be:	80 93 14 02 	sts	0x0214, r24
 6c2:	44 c1       	rjmp	.+648    	; 0x94c <__vector_25+0x38c>
			case (54): data1 = 6; break; //lcd_cursor(1,2); lcd_string("6"); lcd_print(2,2,i,1); break;
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	90 93 15 02 	sts	0x0215, r25
 6cc:	80 93 14 02 	sts	0x0214, r24
 6d0:	3d c1       	rjmp	.+634    	; 0x94c <__vector_25+0x38c>
			case (55): data1 = 7; break; //lcd_cursor(1,2); lcd_string("7"); lcd_print(2,2,i,1); break;
 6d2:	87 e0       	ldi	r24, 0x07	; 7
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	90 93 15 02 	sts	0x0215, r25
 6da:	80 93 14 02 	sts	0x0214, r24
 6de:	36 c1       	rjmp	.+620    	; 0x94c <__vector_25+0x38c>
			case (56): data1 = 8; break; //lcd_cursor(1,2); lcd_string("8"); lcd_print(2,2,i,1); break;
 6e0:	88 e0       	ldi	r24, 0x08	; 8
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	90 93 15 02 	sts	0x0215, r25
 6e8:	80 93 14 02 	sts	0x0214, r24
 6ec:	2f c1       	rjmp	.+606    	; 0x94c <__vector_25+0x38c>
			case (57): data1 = 9; break; //lcd_cursor(1,2); lcd_string("9"); lcd_print(2,2,i,1); break;
 6ee:	89 e0       	ldi	r24, 0x09	; 9
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	90 93 15 02 	sts	0x0215, r25
 6f6:	80 93 14 02 	sts	0x0214, r24
 6fa:	28 c1       	rjmp	.+592    	; 0x94c <__vector_25+0x38c>
		}
	}
	else if(i==1)
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	91 05       	cpc	r25, r1
 700:	09 f0       	breq	.+2      	; 0x704 <__vector_25+0x144>
 702:	6e c0       	rjmp	.+220    	; 0x7e0 <__vector_25+0x220>
	{
		i = i+1;
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 17 02 	sts	0x0217, r25
 70c:	80 93 16 02 	sts	0x0216, r24
		switch(data)
 710:	80 91 37 02 	lds	r24, 0x0237
 714:	84 33       	cpi	r24, 0x34	; 52
 716:	d1 f1       	breq	.+116    	; 0x78c <__vector_25+0x1cc>
 718:	85 33       	cpi	r24, 0x35	; 53
 71a:	70 f4       	brcc	.+28     	; 0x738 <__vector_25+0x178>
 71c:	81 33       	cpi	r24, 0x31	; 49
 71e:	09 f1       	breq	.+66     	; 0x762 <__vector_25+0x1a2>
 720:	82 33       	cpi	r24, 0x32	; 50
 722:	20 f4       	brcc	.+8      	; 0x72c <__vector_25+0x16c>
 724:	80 33       	cpi	r24, 0x30	; 48
 726:	09 f0       	breq	.+2      	; 0x72a <__vector_25+0x16a>
 728:	11 c1       	rjmp	.+546    	; 0x94c <__vector_25+0x38c>
 72a:	16 c0       	rjmp	.+44     	; 0x758 <__vector_25+0x198>
 72c:	82 33       	cpi	r24, 0x32	; 50
 72e:	01 f1       	breq	.+64     	; 0x770 <__vector_25+0x1b0>
 730:	83 33       	cpi	r24, 0x33	; 51
 732:	09 f0       	breq	.+2      	; 0x736 <__vector_25+0x176>
 734:	0b c1       	rjmp	.+534    	; 0x94c <__vector_25+0x38c>
 736:	23 c0       	rjmp	.+70     	; 0x77e <__vector_25+0x1be>
 738:	87 33       	cpi	r24, 0x37	; 55
 73a:	e9 f1       	breq	.+122    	; 0x7b6 <__vector_25+0x1f6>
 73c:	88 33       	cpi	r24, 0x38	; 56
 73e:	30 f4       	brcc	.+12     	; 0x74c <__vector_25+0x18c>
 740:	85 33       	cpi	r24, 0x35	; 53
 742:	59 f1       	breq	.+86     	; 0x79a <__vector_25+0x1da>
 744:	86 33       	cpi	r24, 0x36	; 54
 746:	09 f0       	breq	.+2      	; 0x74a <__vector_25+0x18a>
 748:	01 c1       	rjmp	.+514    	; 0x94c <__vector_25+0x38c>
 74a:	2e c0       	rjmp	.+92     	; 0x7a8 <__vector_25+0x1e8>
 74c:	88 33       	cpi	r24, 0x38	; 56
 74e:	d1 f1       	breq	.+116    	; 0x7c4 <__vector_25+0x204>
 750:	89 33       	cpi	r24, 0x39	; 57
 752:	09 f0       	breq	.+2      	; 0x756 <__vector_25+0x196>
 754:	fb c0       	rjmp	.+502    	; 0x94c <__vector_25+0x38c>
 756:	3d c0       	rjmp	.+122    	; 0x7d2 <__vector_25+0x212>
		{
			case (48): data2 = 0; break;//lcd_cursor(1,3); lcd_string("0"); lcd_print(2,3,i,1);  break;
 758:	10 92 13 02 	sts	0x0213, r1
 75c:	10 92 12 02 	sts	0x0212, r1
 760:	f5 c0       	rjmp	.+490    	; 0x94c <__vector_25+0x38c>
			case (49): data2 = 1; break;//lcd_cursor(1,3); lcd_string("1"); lcd_print(2,3,i,1);  break;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 13 02 	sts	0x0213, r25
 76a:	80 93 12 02 	sts	0x0212, r24
 76e:	ee c0       	rjmp	.+476    	; 0x94c <__vector_25+0x38c>
			case (50): data2 = 2; break;//lcd_cursor(1,3); lcd_string("2"); lcd_print(2,3,i,1); break;
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	90 93 13 02 	sts	0x0213, r25
 778:	80 93 12 02 	sts	0x0212, r24
 77c:	e7 c0       	rjmp	.+462    	; 0x94c <__vector_25+0x38c>
			case (51): data2 = 3; break;//lcd_cursor(1,3); lcd_string("3"); lcd_print(2,3,i,1); break;
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	90 93 13 02 	sts	0x0213, r25
 786:	80 93 12 02 	sts	0x0212, r24
 78a:	e0 c0       	rjmp	.+448    	; 0x94c <__vector_25+0x38c>
			case (52): data2 = 4; break;//lcd_cursor(1,3); lcd_string("4"); lcd_print(2,3,i,1); break;
 78c:	84 e0       	ldi	r24, 0x04	; 4
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	90 93 13 02 	sts	0x0213, r25
 794:	80 93 12 02 	sts	0x0212, r24
 798:	d9 c0       	rjmp	.+434    	; 0x94c <__vector_25+0x38c>
			case (53): data2 = 5; break;//lcd_cursor(1,3); lcd_string("5"); lcd_print(2,3,i,1); break;
 79a:	85 e0       	ldi	r24, 0x05	; 5
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	90 93 13 02 	sts	0x0213, r25
 7a2:	80 93 12 02 	sts	0x0212, r24
 7a6:	d2 c0       	rjmp	.+420    	; 0x94c <__vector_25+0x38c>
			case (54): data2 = 6; break;//lcd_cursor(1,3); lcd_string("6"); lcd_print(2,3,i,1); break;
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	90 93 13 02 	sts	0x0213, r25
 7b0:	80 93 12 02 	sts	0x0212, r24
 7b4:	cb c0       	rjmp	.+406    	; 0x94c <__vector_25+0x38c>
			case (55): data2 = 7; break;//lcd_cursor(1,3); lcd_string("7"); lcd_print(2,3,i,1); break;
 7b6:	87 e0       	ldi	r24, 0x07	; 7
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	90 93 13 02 	sts	0x0213, r25
 7be:	80 93 12 02 	sts	0x0212, r24
 7c2:	c4 c0       	rjmp	.+392    	; 0x94c <__vector_25+0x38c>
			case (56): data2 = 8; break;//lcd_cursor(1,3); lcd_string("8"); lcd_print(2,3,i,1); break;
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 13 02 	sts	0x0213, r25
 7cc:	80 93 12 02 	sts	0x0212, r24
 7d0:	bd c0       	rjmp	.+378    	; 0x94c <__vector_25+0x38c>
			case (57): data2 = 9; break;//lcd_cursor(1,3); lcd_string("9"); lcd_print(2,3,i,1); break;
 7d2:	89 e0       	ldi	r24, 0x09	; 9
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	90 93 13 02 	sts	0x0213, r25
 7da:	80 93 12 02 	sts	0x0212, r24
 7de:	b6 c0       	rjmp	.+364    	; 0x94c <__vector_25+0x38c>
			
		}
	}
	else if (i==2)
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	91 05       	cpc	r25, r1
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <__vector_25+0x228>
 7e6:	6e c0       	rjmp	.+220    	; 0x8c4 <__vector_25+0x304>
	{
		i = i+1;
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	90 93 17 02 	sts	0x0217, r25
 7f0:	80 93 16 02 	sts	0x0216, r24
		switch(data)
 7f4:	80 91 37 02 	lds	r24, 0x0237
 7f8:	84 33       	cpi	r24, 0x34	; 52
 7fa:	d1 f1       	breq	.+116    	; 0x870 <__vector_25+0x2b0>
 7fc:	85 33       	cpi	r24, 0x35	; 53
 7fe:	70 f4       	brcc	.+28     	; 0x81c <__vector_25+0x25c>
 800:	81 33       	cpi	r24, 0x31	; 49
 802:	09 f1       	breq	.+66     	; 0x846 <__vector_25+0x286>
 804:	82 33       	cpi	r24, 0x32	; 50
 806:	20 f4       	brcc	.+8      	; 0x810 <__vector_25+0x250>
 808:	80 33       	cpi	r24, 0x30	; 48
 80a:	09 f0       	breq	.+2      	; 0x80e <__vector_25+0x24e>
 80c:	9f c0       	rjmp	.+318    	; 0x94c <__vector_25+0x38c>
 80e:	16 c0       	rjmp	.+44     	; 0x83c <__vector_25+0x27c>
 810:	82 33       	cpi	r24, 0x32	; 50
 812:	01 f1       	breq	.+64     	; 0x854 <__vector_25+0x294>
 814:	83 33       	cpi	r24, 0x33	; 51
 816:	09 f0       	breq	.+2      	; 0x81a <__vector_25+0x25a>
 818:	99 c0       	rjmp	.+306    	; 0x94c <__vector_25+0x38c>
 81a:	23 c0       	rjmp	.+70     	; 0x862 <__vector_25+0x2a2>
 81c:	87 33       	cpi	r24, 0x37	; 55
 81e:	e9 f1       	breq	.+122    	; 0x89a <__vector_25+0x2da>
 820:	88 33       	cpi	r24, 0x38	; 56
 822:	30 f4       	brcc	.+12     	; 0x830 <__vector_25+0x270>
 824:	85 33       	cpi	r24, 0x35	; 53
 826:	59 f1       	breq	.+86     	; 0x87e <__vector_25+0x2be>
 828:	86 33       	cpi	r24, 0x36	; 54
 82a:	09 f0       	breq	.+2      	; 0x82e <__vector_25+0x26e>
 82c:	8f c0       	rjmp	.+286    	; 0x94c <__vector_25+0x38c>
 82e:	2e c0       	rjmp	.+92     	; 0x88c <__vector_25+0x2cc>
 830:	88 33       	cpi	r24, 0x38	; 56
 832:	d1 f1       	breq	.+116    	; 0x8a8 <__vector_25+0x2e8>
 834:	89 33       	cpi	r24, 0x39	; 57
 836:	09 f0       	breq	.+2      	; 0x83a <__vector_25+0x27a>
 838:	89 c0       	rjmp	.+274    	; 0x94c <__vector_25+0x38c>
 83a:	3d c0       	rjmp	.+122    	; 0x8b6 <__vector_25+0x2f6>
		{
			case (48): data3 = 0; break;//lcd_cursor(1,4); lcd_string("0"); lcd_print(2,4,i,1); break;
 83c:	10 92 11 02 	sts	0x0211, r1
 840:	10 92 10 02 	sts	0x0210, r1
 844:	83 c0       	rjmp	.+262    	; 0x94c <__vector_25+0x38c>
			case (49): data3 = 1; break;//lcd_cursor(1,4); lcd_string("1"); lcd_print(2,4,i,1); break;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	90 93 11 02 	sts	0x0211, r25
 84e:	80 93 10 02 	sts	0x0210, r24
 852:	7c c0       	rjmp	.+248    	; 0x94c <__vector_25+0x38c>
			case (50): data3 = 2; break;//lcd_cursor(1,4); lcd_string("2"); lcd_print(2,4,i,1); break;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	90 93 11 02 	sts	0x0211, r25
 85c:	80 93 10 02 	sts	0x0210, r24
 860:	75 c0       	rjmp	.+234    	; 0x94c <__vector_25+0x38c>
			case (51): data3 = 3; break;//lcd_cursor(1,4); lcd_string("3"); lcd_print(2,4,i,1); break;
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	90 93 11 02 	sts	0x0211, r25
 86a:	80 93 10 02 	sts	0x0210, r24
 86e:	6e c0       	rjmp	.+220    	; 0x94c <__vector_25+0x38c>
			case (52): data3 = 4; break;//lcd_cursor(1,4); lcd_string("4"); lcd_print(2,4,i,1); break;
 870:	84 e0       	ldi	r24, 0x04	; 4
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	90 93 11 02 	sts	0x0211, r25
 878:	80 93 10 02 	sts	0x0210, r24
 87c:	67 c0       	rjmp	.+206    	; 0x94c <__vector_25+0x38c>
			case (53): data3 = 5; break;//lcd_cursor(1,4); lcd_string("5"); lcd_print(2,4,i,1); break;
 87e:	85 e0       	ldi	r24, 0x05	; 5
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	90 93 11 02 	sts	0x0211, r25
 886:	80 93 10 02 	sts	0x0210, r24
 88a:	60 c0       	rjmp	.+192    	; 0x94c <__vector_25+0x38c>
			case (54): data3 = 6; break;//lcd_cursor(1,4); lcd_string("6"); lcd_print(2,4,i,1); break;
 88c:	86 e0       	ldi	r24, 0x06	; 6
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 11 02 	sts	0x0211, r25
 894:	80 93 10 02 	sts	0x0210, r24
 898:	59 c0       	rjmp	.+178    	; 0x94c <__vector_25+0x38c>
			case (55): data3 = 7; break;//lcd_cursor(1,4); lcd_string("7"); lcd_print(2,4,i,1); break;
 89a:	87 e0       	ldi	r24, 0x07	; 7
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	90 93 11 02 	sts	0x0211, r25
 8a2:	80 93 10 02 	sts	0x0210, r24
 8a6:	52 c0       	rjmp	.+164    	; 0x94c <__vector_25+0x38c>
			case (56): data3 = 8; break;//lcd_cursor(1,4); lcd_string("8"); lcd_print(2,4,i,1); break;
 8a8:	88 e0       	ldi	r24, 0x08	; 8
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	90 93 11 02 	sts	0x0211, r25
 8b0:	80 93 10 02 	sts	0x0210, r24
 8b4:	4b c0       	rjmp	.+150    	; 0x94c <__vector_25+0x38c>
			case (57): data3 = 9; break;//lcd_cursor(1,4); lcd_string("9"); lcd_print(2,4,i,1); break;
 8b6:	89 e0       	ldi	r24, 0x09	; 9
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	90 93 11 02 	sts	0x0211, r25
 8be:	80 93 10 02 	sts	0x0210, r24
 8c2:	44 c0       	rjmp	.+136    	; 0x94c <__vector_25+0x38c>
			
		}
	}
	else
	{
		i=0;
 8c4:	10 92 17 02 	sts	0x0217, r1
 8c8:	10 92 16 02 	sts	0x0216, r1
		value = data1*100 + data2*10 + data3;
 8cc:	40 91 14 02 	lds	r20, 0x0214
 8d0:	50 91 15 02 	lds	r21, 0x0215
 8d4:	84 e6       	ldi	r24, 0x64	; 100
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	48 9f       	mul	r20, r24
 8da:	b0 01       	movw	r22, r0
 8dc:	49 9f       	mul	r20, r25
 8de:	70 0d       	add	r23, r0
 8e0:	58 9f       	mul	r21, r24
 8e2:	70 0d       	add	r23, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	80 91 12 02 	lds	r24, 0x0212
 8ea:	90 91 13 02 	lds	r25, 0x0213
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	9c 01       	movw	r18, r24
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	82 0f       	add	r24, r18
 8fe:	93 1f       	adc	r25, r19
 900:	68 0f       	add	r22, r24
 902:	79 1f       	adc	r23, r25
 904:	e0 91 10 02 	lds	r30, 0x0210
 908:	f0 91 11 02 	lds	r31, 0x0211
 90c:	6e 0f       	add	r22, r30
 90e:	7f 1f       	adc	r23, r31
 910:	70 93 0f 02 	sts	0x020F, r23
 914:	60 93 0e 02 	sts	0x020E, r22
		lcd_print(1,1,data1,1);
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	21 e0       	ldi	r18, 0x01	; 1
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		lcd_print(1,3,data2,1);
 924:	40 91 12 02 	lds	r20, 0x0212
 928:	50 91 13 02 	lds	r21, 0x0213
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	63 e0       	ldi	r22, 0x03	; 3
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		lcd_print(1,5,data3,1);
 938:	40 91 10 02 	lds	r20, 0x0210
 93c:	50 91 11 02 	lds	r21, 0x0211
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	65 e0       	ldi	r22, 0x05	; 5
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		
	}	
	lcd_print(2,1,value,3);
 94c:	40 91 0e 02 	lds	r20, 0x020E
 950:	50 91 0f 02 	lds	r21, 0x020F
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	23 e0       	ldi	r18, 0x03	; 3
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	if(data == 0x46) //ASCII value of F
 960:	80 91 37 02 	lds	r24, 0x0237
 964:	86 34       	cpi	r24, 0x46	; 70
 966:	31 f4       	brne	.+12     	; 0x974 <__vector_25+0x3b4>
	{
		forward();  //forward
 968:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
		velocity(255,255);
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	6f ef       	ldi	r22, 0xFF	; 255
 970:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
	}
	if(data == 0x66) //ASCII value of f
 974:	80 91 37 02 	lds	r24, 0x0237
 978:	86 36       	cpi	r24, 0x66	; 102
 97a:	31 f4       	brne	.+12     	; 0x988 <__vector_25+0x3c8>
	{
		back();
 97c:	0e 94 a8 02 	call	0x550	; 0x550 <back>
		velocity(255,255);
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	6f ef       	ldi	r22, 0xFF	; 255
 984:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
	}
	
	if(data == 0x52) //ASCII value of R
 988:	80 91 37 02 	lds	r24, 0x0237
 98c:	82 35       	cpi	r24, 0x52	; 82
 98e:	49 f4       	brne	.+18     	; 0x9a2 <__vector_25+0x3e2>
	{
		forward();  //forward
 990:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
		velocity(250,250 - value);
 994:	80 91 0e 02 	lds	r24, 0x020E
 998:	6a ef       	ldi	r22, 0xFA	; 250
 99a:	68 1b       	sub	r22, r24
 99c:	8a ef       	ldi	r24, 0xFA	; 250
 99e:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
		//lcd_print(2,5,250-value,3);
	}
	if(data == 0x4C) //ASCII value of L
 9a2:	80 91 37 02 	lds	r24, 0x0237
 9a6:	8c 34       	cpi	r24, 0x4C	; 76
 9a8:	49 f4       	brne	.+18     	; 0x9bc <__vector_25+0x3fc>
	{
		forward();  //forward
 9aa:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
		velocity(250 - value,250);
 9ae:	90 91 0e 02 	lds	r25, 0x020E
 9b2:	8a ef       	ldi	r24, 0xFA	; 250
 9b4:	89 1b       	sub	r24, r25
 9b6:	6a ef       	ldi	r22, 0xFA	; 250
 9b8:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
		//lcd_print(2,1,250-value,3);
	}
	if (data == 0x41) // ASCII value of A
 9bc:	80 91 37 02 	lds	r24, 0x0237
 9c0:	81 34       	cpi	r24, 0x41	; 65
 9c2:	31 f4       	brne	.+12     	; 0x9d0 <__vector_25+0x410>
	{
		fast_left();
 9c4:	0e 94 b4 02 	call	0x568	; 0x568 <fast_left>
		velocity(255,255);
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	6f ef       	ldi	r22, 0xFF	; 255
 9cc:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
	}
	
	if (data == 0x44)// ASCII value of D
 9d0:	80 91 37 02 	lds	r24, 0x0237
 9d4:	84 34       	cpi	r24, 0x44	; 68
 9d6:	31 f4       	brne	.+12     	; 0x9e4 <__vector_25+0x424>
	{
		fast_right();
 9d8:	0e 94 b8 02 	call	0x570	; 0x570 <fast_right>
		velocity(255,255);
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	6f ef       	ldi	r22, 0xFF	; 255
 9e0:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
	}
	
	if(data == 0x53) //ASCII value of S
 9e4:	80 91 37 02 	lds	r24, 0x0237
 9e8:	83 35       	cpi	r24, 0x53	; 83
 9ea:	09 f4       	brne	.+2      	; 0x9ee <__vector_25+0x42e>
	{
		PORTA=0x00; //stop
 9ec:	12 b8       	out	0x02, r1	; 2
	}
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0b be       	out	0x3b, r0	; 59
 a0a:	0f 90       	pop	r0
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	0f 90       	pop	r0
 a10:	1f 90       	pop	r1
 a12:	18 95       	reti

00000a14 <init_devices>:
  //Function Name -  init_devices
  //Logic - intitialization
*/
void init_devices (void)
{
 	cli(); //Clears the global interrupts
 a14:	f8 94       	cli
    spi_init();
 a16:	0e 94 28 02 	call	0x450	; 0x450 <spi_init>
	port_init();
 a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <port_init>
	adc_init();
 a1e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <adc_init>
	timer5_init();
 a22:	0e 94 3f 02 	call	0x47e	; 0x47e <timer5_init>
	uart0_init(); //Initailize UART1 for serial communiaction
 a26:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <uart0_init>
	sei();   //Enables the global interrupts
 a2a:	78 94       	sei
}
 a2c:	08 95       	ret

00000a2e <PID>:
  //Input - error corresponding to sensor which is on line
  //Output - correction value which will be added in left and right motor speed
  //Logic - calculate P,I and D errors individualy and add them.
*/
signed int PID(signed int position)
{
 a2e:	4f 92       	push	r4
 a30:	5f 92       	push	r5
 a32:	6f 92       	push	r6
 a34:	7f 92       	push	r7
 a36:	8f 92       	push	r8
 a38:	9f 92       	push	r9
 a3a:	af 92       	push	r10
 a3c:	bf 92       	push	r11
 a3e:	cf 92       	push	r12
 a40:	df 92       	push	r13
 a42:	ef 92       	push	r14
 a44:	ff 92       	push	r15
 a46:	1f 93       	push	r17
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
	
	proportional = position - setpoint; // The "proportional" term should be 0 when we are on the white line.
 a4c:	20 91 1a 02 	lds	r18, 0x021A
 a50:	30 91 1b 02 	lds	r19, 0x021B
 a54:	5c 01       	movw	r10, r24
 a56:	a2 1a       	sub	r10, r18
 a58:	b3 0a       	sbc	r11, r19
 a5a:	b0 92 32 02 	sts	0x0232, r11
 a5e:	a0 92 31 02 	sts	0x0231, r10
	
	integral += proportional;  // Compute the integral (sum) of the position using proportional error.
 a62:	b5 01       	movw	r22, r10
 a64:	88 27       	eor	r24, r24
 a66:	77 fd       	sbrc	r23, 7
 a68:	80 95       	com	r24
 a6a:	98 2f       	mov	r25, r24
 a6c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__floatsisf>
 a70:	2b 01       	movw	r4, r22
 a72:	3c 01       	movw	r6, r24
 a74:	20 91 52 02 	lds	r18, 0x0252
 a78:	30 91 53 02 	lds	r19, 0x0253
 a7c:	40 91 54 02 	lds	r20, 0x0254
 a80:	50 91 55 02 	lds	r21, 0x0255
 a84:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__addsf3>
 a88:	16 2f       	mov	r17, r22
 a8a:	d7 2f       	mov	r29, r23
 a8c:	c8 2f       	mov	r28, r24
 a8e:	c9 2e       	mov	r12, r25
 a90:	86 2f       	mov	r24, r22
 a92:	9d 2f       	mov	r25, r29
 a94:	ac 2f       	mov	r26, r28
 a96:	bc 2d       	mov	r27, r12
 a98:	80 93 52 02 	sts	0x0252, r24
 a9c:	90 93 53 02 	sts	0x0253, r25
 aa0:	a0 93 54 02 	sts	0x0254, r26
 aa4:	b0 93 55 02 	sts	0x0255, r27
	if (integral < -200 )
 aa8:	bc 01       	movw	r22, r24
 aaa:	cd 01       	movw	r24, r26
 aac:	20 e0       	ldi	r18, 0x00	; 0
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	48 e4       	ldi	r20, 0x48	; 72
 ab2:	53 ec       	ldi	r21, 0xC3	; 195
 ab4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__cmpsf2>
 ab8:	88 23       	and	r24, r24
 aba:	6c f4       	brge	.+26     	; 0xad6 <PID+0xa8>
	{
		integral = -200 ;
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	a8 e4       	ldi	r26, 0x48	; 72
 ac2:	b3 ec       	ldi	r27, 0xC3	; 195
 ac4:	80 93 52 02 	sts	0x0252, r24
 ac8:	90 93 53 02 	sts	0x0253, r25
 acc:	a0 93 54 02 	sts	0x0254, r26
 ad0:	b0 93 55 02 	sts	0x0255, r27
 ad4:	1a c0       	rjmp	.+52     	; 0xb0a <PID+0xdc>
	}
	if (integral > 200)
 ad6:	81 2f       	mov	r24, r17
 ad8:	9d 2f       	mov	r25, r29
 ada:	ac 2f       	mov	r26, r28
 adc:	bc 2d       	mov	r27, r12
 ade:	bc 01       	movw	r22, r24
 ae0:	cd 01       	movw	r24, r26
 ae2:	20 e0       	ldi	r18, 0x00	; 0
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	48 e4       	ldi	r20, 0x48	; 72
 ae8:	53 e4       	ldi	r21, 0x43	; 67
 aea:	0e 94 46 07 	call	0xe8c	; 0xe8c <__gesf2>
 aee:	18 16       	cp	r1, r24
 af0:	64 f4       	brge	.+24     	; 0xb0a <PID+0xdc>
	{
		integral = 200 ;
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	a8 e4       	ldi	r26, 0x48	; 72
 af8:	b3 e4       	ldi	r27, 0x43	; 67
 afa:	80 93 52 02 	sts	0x0252, r24
 afe:	90 93 53 02 	sts	0x0253, r25
 b02:	a0 93 54 02 	sts	0x0254, r26
 b06:	b0 93 55 02 	sts	0x0255, r27
	}
	derivative = (proportional - last_proportional); //compute derivative using past and present proportional value.
 b0a:	80 91 28 02 	lds	r24, 0x0228
 b0e:	90 91 29 02 	lds	r25, 0x0229
 b12:	b5 01       	movw	r22, r10
 b14:	68 1b       	sub	r22, r24
 b16:	79 0b       	sbc	r23, r25
 b18:	88 27       	eor	r24, r24
 b1a:	77 fd       	sbrc	r23, 7
 b1c:	80 95       	com	r24
 b1e:	98 2f       	mov	r25, r24
 b20:	0e 94 96 06 	call	0xd2c	; 0xd2c <__floatsisf>
 b24:	6b 01       	movw	r12, r22
 b26:	7c 01       	movw	r14, r24
 b28:	60 93 20 02 	sts	0x0220, r22
 b2c:	70 93 21 02 	sts	0x0221, r23
 b30:	80 93 22 02 	sts	0x0222, r24
 b34:	90 93 23 02 	sts	0x0223, r25
		
	//lcd_print(1,10,500-proportional,3);
	//lcd_print(2,9,500-integral,3);
	//lcd_print(2,14,500-derivative,3);
	
	last_proportional = proportional; // Remember the last position.	
 b38:	b0 92 29 02 	sts	0x0229, r11
 b3c:	a0 92 28 02 	sts	0x0228, r10
	correction = proportional*Kp + integral*Ki + derivative*Kd ;
 b40:	c3 01       	movw	r24, r6
 b42:	b2 01       	movw	r22, r4
 b44:	20 91 00 02 	lds	r18, 0x0200
 b48:	30 91 01 02 	lds	r19, 0x0201
 b4c:	40 91 02 02 	lds	r20, 0x0202
 b50:	50 91 03 02 	lds	r21, 0x0203
 b54:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
 b58:	4b 01       	movw	r8, r22
 b5a:	5c 01       	movw	r10, r24
 b5c:	60 91 52 02 	lds	r22, 0x0252
 b60:	70 91 53 02 	lds	r23, 0x0253
 b64:	80 91 54 02 	lds	r24, 0x0254
 b68:	90 91 55 02 	lds	r25, 0x0255
 b6c:	20 91 0a 02 	lds	r18, 0x020A
 b70:	30 91 0b 02 	lds	r19, 0x020B
 b74:	40 91 0c 02 	lds	r20, 0x020C
 b78:	50 91 0d 02 	lds	r21, 0x020D
 b7c:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
 b80:	9b 01       	movw	r18, r22
 b82:	ac 01       	movw	r20, r24
 b84:	c5 01       	movw	r24, r10
 b86:	b4 01       	movw	r22, r8
 b88:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__addsf3>
 b8c:	4b 01       	movw	r8, r22
 b8e:	5c 01       	movw	r10, r24
 b90:	c7 01       	movw	r24, r14
 b92:	b6 01       	movw	r22, r12
 b94:	20 91 06 02 	lds	r18, 0x0206
 b98:	30 91 07 02 	lds	r19, 0x0207
 b9c:	40 91 08 02 	lds	r20, 0x0208
 ba0:	50 91 09 02 	lds	r21, 0x0209
 ba4:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
 ba8:	9b 01       	movw	r18, r22
 baa:	ac 01       	movw	r20, r24
 bac:	c5 01       	movw	r24, r10
 bae:	b4 01       	movw	r22, r8
 bb0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__addsf3>
 bb4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixsfsi>
 bb8:	60 93 38 02 	sts	0x0238, r22
 bbc:	70 93 39 02 	sts	0x0239, r23
		
	return correction ;
	
}
 bc0:	86 2f       	mov	r24, r22
 bc2:	97 2f       	mov	r25, r23
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	df 90       	pop	r13
 bd0:	cf 90       	pop	r12
 bd2:	bf 90       	pop	r11
 bd4:	af 90       	pop	r10
 bd6:	9f 90       	pop	r9
 bd8:	8f 90       	pop	r8
 bda:	7f 90       	pop	r7
 bdc:	6f 90       	pop	r6
 bde:	5f 90       	pop	r5
 be0:	4f 90       	pop	r4
 be2:	08 95       	ret

00000be4 <SetTunings>:
void SetTunings()
{
	/*lcd_print(1,1,10*Kp,2);
	lcd_print(1,4,10*Ki,2);
	lcd_print(1,7,10*Kd,2);*/
}
 be4:	08 95       	ret

00000be6 <main>:
  //Output - control left and right Motor speeds
  //Logic - add pid correction error here.
*/
int main()
{
	init_devices();
 be6:	0e 94 0a 05 	call	0xa14	; 0xa14 <init_devices>
	lcd_set_4bit();
 bea:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 bee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <main+0xc>

00000bf4 <__subsf3>:
 bf4:	50 58       	subi	r21, 0x80	; 128

00000bf6 <__addsf3>:
 bf6:	bb 27       	eor	r27, r27
 bf8:	aa 27       	eor	r26, r26
 bfa:	0e d0       	rcall	.+28     	; 0xc18 <__addsf3x>
 bfc:	0d c1       	rjmp	.+538    	; 0xe18 <__fp_round>
 bfe:	fe d0       	rcall	.+508    	; 0xdfc <__fp_pscA>
 c00:	30 f0       	brcs	.+12     	; 0xc0e <__addsf3+0x18>
 c02:	03 d1       	rcall	.+518    	; 0xe0a <__fp_pscB>
 c04:	20 f0       	brcs	.+8      	; 0xc0e <__addsf3+0x18>
 c06:	31 f4       	brne	.+12     	; 0xc14 <__addsf3+0x1e>
 c08:	9f 3f       	cpi	r25, 0xFF	; 255
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__addsf3+0x1a>
 c0c:	1e f4       	brtc	.+6      	; 0xc14 <__addsf3+0x1e>
 c0e:	f3 c0       	rjmp	.+486    	; 0xdf6 <__fp_nan>
 c10:	0e f4       	brtc	.+2      	; 0xc14 <__addsf3+0x1e>
 c12:	e0 95       	com	r30
 c14:	e7 fb       	bst	r30, 7
 c16:	e9 c0       	rjmp	.+466    	; 0xdea <__fp_inf>

00000c18 <__addsf3x>:
 c18:	e9 2f       	mov	r30, r25
 c1a:	0f d1       	rcall	.+542    	; 0xe3a <__fp_split3>
 c1c:	80 f3       	brcs	.-32     	; 0xbfe <__addsf3+0x8>
 c1e:	ba 17       	cp	r27, r26
 c20:	62 07       	cpc	r22, r18
 c22:	73 07       	cpc	r23, r19
 c24:	84 07       	cpc	r24, r20
 c26:	95 07       	cpc	r25, r21
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__addsf3x+0x18>
 c2a:	71 f4       	brne	.+28     	; 0xc48 <__addsf3x+0x30>
 c2c:	9e f5       	brtc	.+102    	; 0xc94 <__addsf3x+0x7c>
 c2e:	27 c1       	rjmp	.+590    	; 0xe7e <__fp_zero>
 c30:	0e f4       	brtc	.+2      	; 0xc34 <__addsf3x+0x1c>
 c32:	e0 95       	com	r30
 c34:	0b 2e       	mov	r0, r27
 c36:	ba 2f       	mov	r27, r26
 c38:	a0 2d       	mov	r26, r0
 c3a:	0b 01       	movw	r0, r22
 c3c:	b9 01       	movw	r22, r18
 c3e:	90 01       	movw	r18, r0
 c40:	0c 01       	movw	r0, r24
 c42:	ca 01       	movw	r24, r20
 c44:	a0 01       	movw	r20, r0
 c46:	11 24       	eor	r1, r1
 c48:	ff 27       	eor	r31, r31
 c4a:	59 1b       	sub	r21, r25
 c4c:	99 f0       	breq	.+38     	; 0xc74 <__addsf3x+0x5c>
 c4e:	59 3f       	cpi	r21, 0xF9	; 249
 c50:	50 f4       	brcc	.+20     	; 0xc66 <__addsf3x+0x4e>
 c52:	50 3e       	cpi	r21, 0xE0	; 224
 c54:	68 f1       	brcs	.+90     	; 0xcb0 <__addsf3x+0x98>
 c56:	1a 16       	cp	r1, r26
 c58:	f0 40       	sbci	r31, 0x00	; 0
 c5a:	a2 2f       	mov	r26, r18
 c5c:	23 2f       	mov	r18, r19
 c5e:	34 2f       	mov	r19, r20
 c60:	44 27       	eor	r20, r20
 c62:	58 5f       	subi	r21, 0xF8	; 248
 c64:	f3 cf       	rjmp	.-26     	; 0xc4c <__addsf3x+0x34>
 c66:	46 95       	lsr	r20
 c68:	37 95       	ror	r19
 c6a:	27 95       	ror	r18
 c6c:	a7 95       	ror	r26
 c6e:	f0 40       	sbci	r31, 0x00	; 0
 c70:	53 95       	inc	r21
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__addsf3x+0x4e>
 c74:	7e f4       	brtc	.+30     	; 0xc94 <__addsf3x+0x7c>
 c76:	1f 16       	cp	r1, r31
 c78:	ba 0b       	sbc	r27, r26
 c7a:	62 0b       	sbc	r22, r18
 c7c:	73 0b       	sbc	r23, r19
 c7e:	84 0b       	sbc	r24, r20
 c80:	ba f0       	brmi	.+46     	; 0xcb0 <__addsf3x+0x98>
 c82:	91 50       	subi	r25, 0x01	; 1
 c84:	a1 f0       	breq	.+40     	; 0xcae <__addsf3x+0x96>
 c86:	ff 0f       	add	r31, r31
 c88:	bb 1f       	adc	r27, r27
 c8a:	66 1f       	adc	r22, r22
 c8c:	77 1f       	adc	r23, r23
 c8e:	88 1f       	adc	r24, r24
 c90:	c2 f7       	brpl	.-16     	; 0xc82 <__addsf3x+0x6a>
 c92:	0e c0       	rjmp	.+28     	; 0xcb0 <__addsf3x+0x98>
 c94:	ba 0f       	add	r27, r26
 c96:	62 1f       	adc	r22, r18
 c98:	73 1f       	adc	r23, r19
 c9a:	84 1f       	adc	r24, r20
 c9c:	48 f4       	brcc	.+18     	; 0xcb0 <__addsf3x+0x98>
 c9e:	87 95       	ror	r24
 ca0:	77 95       	ror	r23
 ca2:	67 95       	ror	r22
 ca4:	b7 95       	ror	r27
 ca6:	f7 95       	ror	r31
 ca8:	9e 3f       	cpi	r25, 0xFE	; 254
 caa:	08 f0       	brcs	.+2      	; 0xcae <__addsf3x+0x96>
 cac:	b3 cf       	rjmp	.-154    	; 0xc14 <__addsf3+0x1e>
 cae:	93 95       	inc	r25
 cb0:	88 0f       	add	r24, r24
 cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__addsf3x+0x9e>
 cb4:	99 27       	eor	r25, r25
 cb6:	ee 0f       	add	r30, r30
 cb8:	97 95       	ror	r25
 cba:	87 95       	ror	r24
 cbc:	08 95       	ret

00000cbe <__cmpsf2>:
 cbe:	71 d0       	rcall	.+226    	; 0xda2 <__fp_cmp>
 cc0:	08 f4       	brcc	.+2      	; 0xcc4 <__cmpsf2+0x6>
 cc2:	81 e0       	ldi	r24, 0x01	; 1
 cc4:	08 95       	ret

00000cc6 <__fixsfsi>:
 cc6:	04 d0       	rcall	.+8      	; 0xcd0 <__fixunssfsi>
 cc8:	68 94       	set
 cca:	b1 11       	cpse	r27, r1
 ccc:	d9 c0       	rjmp	.+434    	; 0xe80 <__fp_szero>
 cce:	08 95       	ret

00000cd0 <__fixunssfsi>:
 cd0:	bc d0       	rcall	.+376    	; 0xe4a <__fp_splitA>
 cd2:	88 f0       	brcs	.+34     	; 0xcf6 <__fixunssfsi+0x26>
 cd4:	9f 57       	subi	r25, 0x7F	; 127
 cd6:	90 f0       	brcs	.+36     	; 0xcfc <__fixunssfsi+0x2c>
 cd8:	b9 2f       	mov	r27, r25
 cda:	99 27       	eor	r25, r25
 cdc:	b7 51       	subi	r27, 0x17	; 23
 cde:	a0 f0       	brcs	.+40     	; 0xd08 <__fixunssfsi+0x38>
 ce0:	d1 f0       	breq	.+52     	; 0xd16 <__fixunssfsi+0x46>
 ce2:	66 0f       	add	r22, r22
 ce4:	77 1f       	adc	r23, r23
 ce6:	88 1f       	adc	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	1a f0       	brmi	.+6      	; 0xcf2 <__fixunssfsi+0x22>
 cec:	ba 95       	dec	r27
 cee:	c9 f7       	brne	.-14     	; 0xce2 <__fixunssfsi+0x12>
 cf0:	12 c0       	rjmp	.+36     	; 0xd16 <__fixunssfsi+0x46>
 cf2:	b1 30       	cpi	r27, 0x01	; 1
 cf4:	81 f0       	breq	.+32     	; 0xd16 <__fixunssfsi+0x46>
 cf6:	c3 d0       	rcall	.+390    	; 0xe7e <__fp_zero>
 cf8:	b1 e0       	ldi	r27, 0x01	; 1
 cfa:	08 95       	ret
 cfc:	c0 c0       	rjmp	.+384    	; 0xe7e <__fp_zero>
 cfe:	67 2f       	mov	r22, r23
 d00:	78 2f       	mov	r23, r24
 d02:	88 27       	eor	r24, r24
 d04:	b8 5f       	subi	r27, 0xF8	; 248
 d06:	39 f0       	breq	.+14     	; 0xd16 <__fixunssfsi+0x46>
 d08:	b9 3f       	cpi	r27, 0xF9	; 249
 d0a:	cc f3       	brlt	.-14     	; 0xcfe <__fixunssfsi+0x2e>
 d0c:	86 95       	lsr	r24
 d0e:	77 95       	ror	r23
 d10:	67 95       	ror	r22
 d12:	b3 95       	inc	r27
 d14:	d9 f7       	brne	.-10     	; 0xd0c <__fixunssfsi+0x3c>
 d16:	3e f4       	brtc	.+14     	; 0xd26 <__fixunssfsi+0x56>
 d18:	90 95       	com	r25
 d1a:	80 95       	com	r24
 d1c:	70 95       	com	r23
 d1e:	61 95       	neg	r22
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	08 95       	ret

00000d28 <__floatunsisf>:
 d28:	e8 94       	clt
 d2a:	09 c0       	rjmp	.+18     	; 0xd3e <__floatsisf+0x12>

00000d2c <__floatsisf>:
 d2c:	97 fb       	bst	r25, 7
 d2e:	3e f4       	brtc	.+14     	; 0xd3e <__floatsisf+0x12>
 d30:	90 95       	com	r25
 d32:	80 95       	com	r24
 d34:	70 95       	com	r23
 d36:	61 95       	neg	r22
 d38:	7f 4f       	sbci	r23, 0xFF	; 255
 d3a:	8f 4f       	sbci	r24, 0xFF	; 255
 d3c:	9f 4f       	sbci	r25, 0xFF	; 255
 d3e:	99 23       	and	r25, r25
 d40:	a9 f0       	breq	.+42     	; 0xd6c <__floatsisf+0x40>
 d42:	f9 2f       	mov	r31, r25
 d44:	96 e9       	ldi	r25, 0x96	; 150
 d46:	bb 27       	eor	r27, r27
 d48:	93 95       	inc	r25
 d4a:	f6 95       	lsr	r31
 d4c:	87 95       	ror	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b7 95       	ror	r27
 d54:	f1 11       	cpse	r31, r1
 d56:	f8 cf       	rjmp	.-16     	; 0xd48 <__floatsisf+0x1c>
 d58:	fa f4       	brpl	.+62     	; 0xd98 <__floatsisf+0x6c>
 d5a:	bb 0f       	add	r27, r27
 d5c:	11 f4       	brne	.+4      	; 0xd62 <__floatsisf+0x36>
 d5e:	60 ff       	sbrs	r22, 0
 d60:	1b c0       	rjmp	.+54     	; 0xd98 <__floatsisf+0x6c>
 d62:	6f 5f       	subi	r22, 0xFF	; 255
 d64:	7f 4f       	sbci	r23, 0xFF	; 255
 d66:	8f 4f       	sbci	r24, 0xFF	; 255
 d68:	9f 4f       	sbci	r25, 0xFF	; 255
 d6a:	16 c0       	rjmp	.+44     	; 0xd98 <__floatsisf+0x6c>
 d6c:	88 23       	and	r24, r24
 d6e:	11 f0       	breq	.+4      	; 0xd74 <__floatsisf+0x48>
 d70:	96 e9       	ldi	r25, 0x96	; 150
 d72:	11 c0       	rjmp	.+34     	; 0xd96 <__floatsisf+0x6a>
 d74:	77 23       	and	r23, r23
 d76:	21 f0       	breq	.+8      	; 0xd80 <__floatsisf+0x54>
 d78:	9e e8       	ldi	r25, 0x8E	; 142
 d7a:	87 2f       	mov	r24, r23
 d7c:	76 2f       	mov	r23, r22
 d7e:	05 c0       	rjmp	.+10     	; 0xd8a <__floatsisf+0x5e>
 d80:	66 23       	and	r22, r22
 d82:	71 f0       	breq	.+28     	; 0xda0 <__floatsisf+0x74>
 d84:	96 e8       	ldi	r25, 0x86	; 134
 d86:	86 2f       	mov	r24, r22
 d88:	70 e0       	ldi	r23, 0x00	; 0
 d8a:	60 e0       	ldi	r22, 0x00	; 0
 d8c:	2a f0       	brmi	.+10     	; 0xd98 <__floatsisf+0x6c>
 d8e:	9a 95       	dec	r25
 d90:	66 0f       	add	r22, r22
 d92:	77 1f       	adc	r23, r23
 d94:	88 1f       	adc	r24, r24
 d96:	da f7       	brpl	.-10     	; 0xd8e <__floatsisf+0x62>
 d98:	88 0f       	add	r24, r24
 d9a:	96 95       	lsr	r25
 d9c:	87 95       	ror	r24
 d9e:	97 f9       	bld	r25, 7
 da0:	08 95       	ret

00000da2 <__fp_cmp>:
 da2:	99 0f       	add	r25, r25
 da4:	00 08       	sbc	r0, r0
 da6:	55 0f       	add	r21, r21
 da8:	aa 0b       	sbc	r26, r26
 daa:	e0 e8       	ldi	r30, 0x80	; 128
 dac:	fe ef       	ldi	r31, 0xFE	; 254
 dae:	16 16       	cp	r1, r22
 db0:	17 06       	cpc	r1, r23
 db2:	e8 07       	cpc	r30, r24
 db4:	f9 07       	cpc	r31, r25
 db6:	c0 f0       	brcs	.+48     	; 0xde8 <__fp_cmp+0x46>
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	e4 07       	cpc	r30, r20
 dbe:	f5 07       	cpc	r31, r21
 dc0:	98 f0       	brcs	.+38     	; 0xde8 <__fp_cmp+0x46>
 dc2:	62 1b       	sub	r22, r18
 dc4:	73 0b       	sbc	r23, r19
 dc6:	84 0b       	sbc	r24, r20
 dc8:	95 0b       	sbc	r25, r21
 dca:	39 f4       	brne	.+14     	; 0xdda <__fp_cmp+0x38>
 dcc:	0a 26       	eor	r0, r26
 dce:	61 f0       	breq	.+24     	; 0xde8 <__fp_cmp+0x46>
 dd0:	23 2b       	or	r18, r19
 dd2:	24 2b       	or	r18, r20
 dd4:	25 2b       	or	r18, r21
 dd6:	21 f4       	brne	.+8      	; 0xde0 <__fp_cmp+0x3e>
 dd8:	08 95       	ret
 dda:	0a 26       	eor	r0, r26
 ddc:	09 f4       	brne	.+2      	; 0xde0 <__fp_cmp+0x3e>
 dde:	a1 40       	sbci	r26, 0x01	; 1
 de0:	a6 95       	lsr	r26
 de2:	8f ef       	ldi	r24, 0xFF	; 255
 de4:	81 1d       	adc	r24, r1
 de6:	81 1d       	adc	r24, r1
 de8:	08 95       	ret

00000dea <__fp_inf>:
 dea:	97 f9       	bld	r25, 7
 dec:	9f 67       	ori	r25, 0x7F	; 127
 dee:	80 e8       	ldi	r24, 0x80	; 128
 df0:	70 e0       	ldi	r23, 0x00	; 0
 df2:	60 e0       	ldi	r22, 0x00	; 0
 df4:	08 95       	ret

00000df6 <__fp_nan>:
 df6:	9f ef       	ldi	r25, 0xFF	; 255
 df8:	80 ec       	ldi	r24, 0xC0	; 192
 dfa:	08 95       	ret

00000dfc <__fp_pscA>:
 dfc:	00 24       	eor	r0, r0
 dfe:	0a 94       	dec	r0
 e00:	16 16       	cp	r1, r22
 e02:	17 06       	cpc	r1, r23
 e04:	18 06       	cpc	r1, r24
 e06:	09 06       	cpc	r0, r25
 e08:	08 95       	ret

00000e0a <__fp_pscB>:
 e0a:	00 24       	eor	r0, r0
 e0c:	0a 94       	dec	r0
 e0e:	12 16       	cp	r1, r18
 e10:	13 06       	cpc	r1, r19
 e12:	14 06       	cpc	r1, r20
 e14:	05 06       	cpc	r0, r21
 e16:	08 95       	ret

00000e18 <__fp_round>:
 e18:	09 2e       	mov	r0, r25
 e1a:	03 94       	inc	r0
 e1c:	00 0c       	add	r0, r0
 e1e:	11 f4       	brne	.+4      	; 0xe24 <__fp_round+0xc>
 e20:	88 23       	and	r24, r24
 e22:	52 f0       	brmi	.+20     	; 0xe38 <__fp_round+0x20>
 e24:	bb 0f       	add	r27, r27
 e26:	40 f4       	brcc	.+16     	; 0xe38 <__fp_round+0x20>
 e28:	bf 2b       	or	r27, r31
 e2a:	11 f4       	brne	.+4      	; 0xe30 <__fp_round+0x18>
 e2c:	60 ff       	sbrs	r22, 0
 e2e:	04 c0       	rjmp	.+8      	; 0xe38 <__fp_round+0x20>
 e30:	6f 5f       	subi	r22, 0xFF	; 255
 e32:	7f 4f       	sbci	r23, 0xFF	; 255
 e34:	8f 4f       	sbci	r24, 0xFF	; 255
 e36:	9f 4f       	sbci	r25, 0xFF	; 255
 e38:	08 95       	ret

00000e3a <__fp_split3>:
 e3a:	57 fd       	sbrc	r21, 7
 e3c:	90 58       	subi	r25, 0x80	; 128
 e3e:	44 0f       	add	r20, r20
 e40:	55 1f       	adc	r21, r21
 e42:	59 f0       	breq	.+22     	; 0xe5a <__fp_splitA+0x10>
 e44:	5f 3f       	cpi	r21, 0xFF	; 255
 e46:	71 f0       	breq	.+28     	; 0xe64 <__fp_splitA+0x1a>
 e48:	47 95       	ror	r20

00000e4a <__fp_splitA>:
 e4a:	88 0f       	add	r24, r24
 e4c:	97 fb       	bst	r25, 7
 e4e:	99 1f       	adc	r25, r25
 e50:	61 f0       	breq	.+24     	; 0xe6a <__fp_splitA+0x20>
 e52:	9f 3f       	cpi	r25, 0xFF	; 255
 e54:	79 f0       	breq	.+30     	; 0xe74 <__fp_splitA+0x2a>
 e56:	87 95       	ror	r24
 e58:	08 95       	ret
 e5a:	12 16       	cp	r1, r18
 e5c:	13 06       	cpc	r1, r19
 e5e:	14 06       	cpc	r1, r20
 e60:	55 1f       	adc	r21, r21
 e62:	f2 cf       	rjmp	.-28     	; 0xe48 <__fp_split3+0xe>
 e64:	46 95       	lsr	r20
 e66:	f1 df       	rcall	.-30     	; 0xe4a <__fp_splitA>
 e68:	08 c0       	rjmp	.+16     	; 0xe7a <__fp_splitA+0x30>
 e6a:	16 16       	cp	r1, r22
 e6c:	17 06       	cpc	r1, r23
 e6e:	18 06       	cpc	r1, r24
 e70:	99 1f       	adc	r25, r25
 e72:	f1 cf       	rjmp	.-30     	; 0xe56 <__fp_splitA+0xc>
 e74:	86 95       	lsr	r24
 e76:	71 05       	cpc	r23, r1
 e78:	61 05       	cpc	r22, r1
 e7a:	08 94       	sec
 e7c:	08 95       	ret

00000e7e <__fp_zero>:
 e7e:	e8 94       	clt

00000e80 <__fp_szero>:
 e80:	bb 27       	eor	r27, r27
 e82:	66 27       	eor	r22, r22
 e84:	77 27       	eor	r23, r23
 e86:	cb 01       	movw	r24, r22
 e88:	97 f9       	bld	r25, 7
 e8a:	08 95       	ret

00000e8c <__gesf2>:
 e8c:	8a df       	rcall	.-236    	; 0xda2 <__fp_cmp>
 e8e:	08 f4       	brcc	.+2      	; 0xe92 <__gesf2+0x6>
 e90:	8f ef       	ldi	r24, 0xFF	; 255
 e92:	08 95       	ret

00000e94 <__mulsf3>:
 e94:	0b d0       	rcall	.+22     	; 0xeac <__mulsf3x>
 e96:	c0 cf       	rjmp	.-128    	; 0xe18 <__fp_round>
 e98:	b1 df       	rcall	.-158    	; 0xdfc <__fp_pscA>
 e9a:	28 f0       	brcs	.+10     	; 0xea6 <__mulsf3+0x12>
 e9c:	b6 df       	rcall	.-148    	; 0xe0a <__fp_pscB>
 e9e:	18 f0       	brcs	.+6      	; 0xea6 <__mulsf3+0x12>
 ea0:	95 23       	and	r25, r21
 ea2:	09 f0       	breq	.+2      	; 0xea6 <__mulsf3+0x12>
 ea4:	a2 cf       	rjmp	.-188    	; 0xdea <__fp_inf>
 ea6:	a7 cf       	rjmp	.-178    	; 0xdf6 <__fp_nan>
 ea8:	11 24       	eor	r1, r1
 eaa:	ea cf       	rjmp	.-44     	; 0xe80 <__fp_szero>

00000eac <__mulsf3x>:
 eac:	c6 df       	rcall	.-116    	; 0xe3a <__fp_split3>
 eae:	a0 f3       	brcs	.-24     	; 0xe98 <__mulsf3+0x4>

00000eb0 <__mulsf3_pse>:
 eb0:	95 9f       	mul	r25, r21
 eb2:	d1 f3       	breq	.-12     	; 0xea8 <__mulsf3+0x14>
 eb4:	95 0f       	add	r25, r21
 eb6:	50 e0       	ldi	r21, 0x00	; 0
 eb8:	55 1f       	adc	r21, r21
 eba:	62 9f       	mul	r22, r18
 ebc:	f0 01       	movw	r30, r0
 ebe:	72 9f       	mul	r23, r18
 ec0:	bb 27       	eor	r27, r27
 ec2:	f0 0d       	add	r31, r0
 ec4:	b1 1d       	adc	r27, r1
 ec6:	63 9f       	mul	r22, r19
 ec8:	aa 27       	eor	r26, r26
 eca:	f0 0d       	add	r31, r0
 ecc:	b1 1d       	adc	r27, r1
 ece:	aa 1f       	adc	r26, r26
 ed0:	64 9f       	mul	r22, r20
 ed2:	66 27       	eor	r22, r22
 ed4:	b0 0d       	add	r27, r0
 ed6:	a1 1d       	adc	r26, r1
 ed8:	66 1f       	adc	r22, r22
 eda:	82 9f       	mul	r24, r18
 edc:	22 27       	eor	r18, r18
 ede:	b0 0d       	add	r27, r0
 ee0:	a1 1d       	adc	r26, r1
 ee2:	62 1f       	adc	r22, r18
 ee4:	73 9f       	mul	r23, r19
 ee6:	b0 0d       	add	r27, r0
 ee8:	a1 1d       	adc	r26, r1
 eea:	62 1f       	adc	r22, r18
 eec:	83 9f       	mul	r24, r19
 eee:	a0 0d       	add	r26, r0
 ef0:	61 1d       	adc	r22, r1
 ef2:	22 1f       	adc	r18, r18
 ef4:	74 9f       	mul	r23, r20
 ef6:	33 27       	eor	r19, r19
 ef8:	a0 0d       	add	r26, r0
 efa:	61 1d       	adc	r22, r1
 efc:	23 1f       	adc	r18, r19
 efe:	84 9f       	mul	r24, r20
 f00:	60 0d       	add	r22, r0
 f02:	21 1d       	adc	r18, r1
 f04:	82 2f       	mov	r24, r18
 f06:	76 2f       	mov	r23, r22
 f08:	6a 2f       	mov	r22, r26
 f0a:	11 24       	eor	r1, r1
 f0c:	9f 57       	subi	r25, 0x7F	; 127
 f0e:	50 40       	sbci	r21, 0x00	; 0
 f10:	8a f0       	brmi	.+34     	; 0xf34 <__mulsf3_pse+0x84>
 f12:	e1 f0       	breq	.+56     	; 0xf4c <__mulsf3_pse+0x9c>
 f14:	88 23       	and	r24, r24
 f16:	4a f0       	brmi	.+18     	; 0xf2a <__mulsf3_pse+0x7a>
 f18:	ee 0f       	add	r30, r30
 f1a:	ff 1f       	adc	r31, r31
 f1c:	bb 1f       	adc	r27, r27
 f1e:	66 1f       	adc	r22, r22
 f20:	77 1f       	adc	r23, r23
 f22:	88 1f       	adc	r24, r24
 f24:	91 50       	subi	r25, 0x01	; 1
 f26:	50 40       	sbci	r21, 0x00	; 0
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__mulsf3_pse+0x64>
 f2a:	9e 3f       	cpi	r25, 0xFE	; 254
 f2c:	51 05       	cpc	r21, r1
 f2e:	70 f0       	brcs	.+28     	; 0xf4c <__mulsf3_pse+0x9c>
 f30:	5c cf       	rjmp	.-328    	; 0xdea <__fp_inf>
 f32:	a6 cf       	rjmp	.-180    	; 0xe80 <__fp_szero>
 f34:	5f 3f       	cpi	r21, 0xFF	; 255
 f36:	ec f3       	brlt	.-6      	; 0xf32 <__mulsf3_pse+0x82>
 f38:	98 3e       	cpi	r25, 0xE8	; 232
 f3a:	dc f3       	brlt	.-10     	; 0xf32 <__mulsf3_pse+0x82>
 f3c:	86 95       	lsr	r24
 f3e:	77 95       	ror	r23
 f40:	67 95       	ror	r22
 f42:	b7 95       	ror	r27
 f44:	f7 95       	ror	r31
 f46:	e7 95       	ror	r30
 f48:	9f 5f       	subi	r25, 0xFF	; 255
 f4a:	c1 f7       	brne	.-16     	; 0xf3c <__mulsf3_pse+0x8c>
 f4c:	fe 2b       	or	r31, r30
 f4e:	88 0f       	add	r24, r24
 f50:	91 1d       	adc	r25, r1
 f52:	96 95       	lsr	r25
 f54:	87 95       	ror	r24
 f56:	97 f9       	bld	r25, 7
 f58:	08 95       	ret

00000f5a <__udivmodhi4>:
 f5a:	aa 1b       	sub	r26, r26
 f5c:	bb 1b       	sub	r27, r27
 f5e:	51 e1       	ldi	r21, 0x11	; 17
 f60:	07 c0       	rjmp	.+14     	; 0xf70 <__udivmodhi4_ep>

00000f62 <__udivmodhi4_loop>:
 f62:	aa 1f       	adc	r26, r26
 f64:	bb 1f       	adc	r27, r27
 f66:	a6 17       	cp	r26, r22
 f68:	b7 07       	cpc	r27, r23
 f6a:	10 f0       	brcs	.+4      	; 0xf70 <__udivmodhi4_ep>
 f6c:	a6 1b       	sub	r26, r22
 f6e:	b7 0b       	sbc	r27, r23

00000f70 <__udivmodhi4_ep>:
 f70:	88 1f       	adc	r24, r24
 f72:	99 1f       	adc	r25, r25
 f74:	5a 95       	dec	r21
 f76:	a9 f7       	brne	.-22     	; 0xf62 <__udivmodhi4_loop>
 f78:	80 95       	com	r24
 f7a:	90 95       	com	r25
 f7c:	bc 01       	movw	r22, r24
 f7e:	cd 01       	movw	r24, r26
 f80:	08 95       	ret

00000f82 <__divmodhi4>:
 f82:	97 fb       	bst	r25, 7
 f84:	09 2e       	mov	r0, r25
 f86:	07 26       	eor	r0, r23
 f88:	0a d0       	rcall	.+20     	; 0xf9e <__divmodhi4_neg1>
 f8a:	77 fd       	sbrc	r23, 7
 f8c:	04 d0       	rcall	.+8      	; 0xf96 <__divmodhi4_neg2>
 f8e:	e5 df       	rcall	.-54     	; 0xf5a <__udivmodhi4>
 f90:	06 d0       	rcall	.+12     	; 0xf9e <__divmodhi4_neg1>
 f92:	00 20       	and	r0, r0
 f94:	1a f4       	brpl	.+6      	; 0xf9c <__divmodhi4_exit>

00000f96 <__divmodhi4_neg2>:
 f96:	70 95       	com	r23
 f98:	61 95       	neg	r22
 f9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f9c <__divmodhi4_exit>:
 f9c:	08 95       	ret

00000f9e <__divmodhi4_neg1>:
 f9e:	f6 f7       	brtc	.-4      	; 0xf9c <__divmodhi4_exit>
 fa0:	90 95       	com	r25
 fa2:	81 95       	neg	r24
 fa4:	9f 4f       	sbci	r25, 0xFF	; 255
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
