
11_White_line_following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000012b0  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800208  00800208  0000134c  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001097  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000031d  00000000  00000000  00004ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a9  00000000  00000000  00004dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00005480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c3  00000000  00000000  00005b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 eb       	ldi	r30, 0xB0	; 176
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 35       	cpi	r26, 0x5C	; 92
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 3b 05 	call	0xa76	; 0xa76 <main>
     122:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
     132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	80 e3       	ldi	r24, 0x30	; 48
     13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	ef ef       	ldi	r30, 0xFF	; 255
     140:	f7 e4       	ldi	r31, 0x47	; 71
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
     146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
     148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     14a:	42 98       	cbi	0x08, 2	; 8
     14c:	e6 e6       	ldi	r30, 0x66	; 102
     14e:	fe e0       	ldi	r31, 0x0E	; 14
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
     154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f7 e4       	ldi	r31, 0x47	; 71
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
     168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	e6 e6       	ldi	r30, 0x66	; 102
     16e:	fe e0       	ldi	r31, 0x0E	; 14
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
     174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	97 e4       	ldi	r25, 0x47	; 71
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
     188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
     194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     19e:	42 9a       	sbi	0x08, 2	; 8
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	97 e4       	ldi	r25, 0x47	; 71
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
     1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ac:	42 98       	cbi	0x08, 2	; 8

	
}
     1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(signed char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1b8:	28 2f       	mov	r18, r24
     1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1bc:	92 2b       	or	r25, r18
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	ef ef       	ldi	r30, 0xFF	; 255
     1c8:	f7 e4       	ldi	r31, 0x47	; 71
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
     1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1d4:	82 95       	swap	r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
     1d8:	98 b1       	in	r25, 0x08	; 8
     1da:	9f 70       	andi	r25, 0x0F	; 15
     1dc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1de:	98 b1       	in	r25, 0x08	; 8
     1e0:	89 2b       	or	r24, r25
     1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1e8:	42 9a       	sbi	0x08, 2	; 8
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	97 e4       	ldi	r25, 0x47	; 71
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
     1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1f6:	42 98       	cbi	0x08, 2	; 8
}
     1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
     206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
     226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     228:	98 b1       	in	r25, 0x08	; 8
     22a:	9f 70       	andi	r25, 0x0F	; 15
     22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     230:	28 2f       	mov	r18, r24
     232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     234:	92 2b       	or	r25, r18
     236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     23c:	42 9a       	sbi	0x08, 2	; 8
     23e:	ef ef       	ldi	r30, 0xFF	; 255
     240:	f7 e4       	ldi	r31, 0x47	; 71
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
     246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
     248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     24c:	98 b1       	in	r25, 0x08	; 8
     24e:	9f 70       	andi	r25, 0x0F	; 15
     250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     254:	82 95       	swap	r24
     256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     258:	89 2b       	or	r24, r25
     25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	97 e4       	ldi	r25, 0x47	; 71
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
     26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     26e:	42 98       	cbi	0x08, 2	; 8
}
     270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
     278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     28c:	89 91       	ld	r24, Y+
     28e:	88 23       	and	r24, r24
     290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
     2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2b0:	86 2f       	mov	r24, r22
     2b2:	81 58       	subi	r24, 0x81	; 129
     2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2ba:	86 2f       	mov	r24, r22
     2bc:	81 54       	subi	r24, 0x41	; 65
     2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2c4:	86 2f       	mov	r24, r22
     2c6:	8d 56       	subi	r24, 0x6D	; 109
     2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2ce:	86 2f       	mov	r24, r22
     2d0:	8d 52       	subi	r24, 0x2D	; 45
     2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	8a 01       	movw	r16, r20
     2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2e4:	88 23       	and	r24, r24
     2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
     2e8:	66 23       	and	r22, r22
     2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
     2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2f6:	c5 30       	cpi	r28, 0x05	; 5
     2f8:	d1 05       	cpc	r29, r1
     2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
     2fc:	c8 01       	movw	r24, r16
     2fe:	60 e1       	ldi	r22, 0x10	; 16
     300:	77 e2       	ldi	r23, 0x27	; 39
     302:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     306:	cb 01       	movw	r24, r22
     308:	c0 96       	adiw	r24, 0x30	; 48
     30a:	90 93 19 02 	sts	0x0219, r25
     30e:	80 93 18 02 	sts	0x0218, r24
		lcd_wr_char(million);
     312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
     316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     318:	c4 30       	cpi	r28, 0x04	; 4
     31a:	d1 05       	cpc	r29, r1
     31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
     31e:	c8 01       	movw	r24, r16
     320:	68 ee       	ldi	r22, 0xE8	; 232
     322:	73 e0       	ldi	r23, 0x03	; 3
     324:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     328:	cb 01       	movw	r24, r22
     32a:	70 93 21 02 	sts	0x0221, r23
     32e:	60 93 20 02 	sts	0x0220, r22
		thousand = temp%10 + 48;
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
     33a:	c0 96       	adiw	r24, 0x30	; 48
     33c:	90 93 41 02 	sts	0x0241, r25
     340:	80 93 40 02 	sts	0x0240, r24
		lcd_wr_char(thousand);
     344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, signed int value, int digits)
{
	unsigned char flag=0;
     34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     34e:	c3 30       	cpi	r28, 0x03	; 3
     350:	d1 05       	cpc	r29, r1
     352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
     358:	c8 01       	movw	r24, r16
     35a:	64 e6       	ldi	r22, 0x64	; 100
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     362:	cb 01       	movw	r24, r22
     364:	70 93 21 02 	sts	0x0221, r23
     368:	60 93 20 02 	sts	0x0220, r22
		hundred = temp%10 + 48;
     36c:	6a e0       	ldi	r22, 0x0A	; 10
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
     374:	c0 96       	adiw	r24, 0x30	; 48
     376:	90 93 2d 02 	sts	0x022D, r25
     37a:	80 93 2c 02 	sts	0x022C, r24
		lcd_wr_char(hundred);
     37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     384:	c2 30       	cpi	r28, 0x02	; 2
     386:	d1 05       	cpc	r29, r1
     388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
     38e:	2a e0       	ldi	r18, 0x0A	; 10
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	c8 01       	movw	r24, r16
     394:	b9 01       	movw	r22, r18
     396:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     39a:	cb 01       	movw	r24, r22
     39c:	70 93 21 02 	sts	0x0221, r23
     3a0:	60 93 20 02 	sts	0x0220, r22
		tens = temp%10 + 48;
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
     3aa:	c0 96       	adiw	r24, 0x30	; 48
     3ac:	90 93 28 02 	sts	0x0228, r25
     3b0:	80 93 27 02 	sts	0x0227, r24
		lcd_wr_char(tens);
     3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3ba:	c1 30       	cpi	r28, 0x01	; 1
     3bc:	d1 05       	cpc	r29, r1
     3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3c4:	c8 01       	movw	r24, r16
     3c6:	6a e0       	ldi	r22, 0x0A	; 10
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     3ce:	c0 96       	adiw	r24, 0x30	; 48
     3d0:	90 93 3f 02 	sts	0x023F, r25
     3d4:	80 93 3e 02 	sts	0x023E, r24
		lcd_wr_char(unit);
     3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
     3dc:	c6 30       	cpi	r28, 0x06	; 6
     3de:	d1 05       	cpc	r29, r1
     3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3e2:	85 e4       	ldi	r24, 0x45	; 69
     3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <spi_pin_config>:

float Kp=0.4, Ki=0 ,Kd=0.1 ,integral,derivative;

void spi_pin_config (void)
{
	DDRB = DDRB | 0x07;
     3f2:	84 b1       	in	r24, 0x04	; 4
     3f4:	87 60       	ori	r24, 0x07	; 7
     3f6:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0x07;
     3f8:	85 b1       	in	r24, 0x05	; 5
     3fa:	87 60       	ori	r24, 0x07	; 7
     3fc:	85 b9       	out	0x05, r24	; 5
}
     3fe:	08 95       	ret

00000400 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     400:	87 b1       	in	r24, 0x07	; 7
     402:	87 6f       	ori	r24, 0xF7	; 247
     404:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     406:	88 b1       	in	r24, 0x08	; 8
     408:	80 78       	andi	r24, 0x80	; 128
     40a:	88 b9       	out	0x08, r24	; 8
}
     40c:	08 95       	ret

0000040e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00; 
     40e:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     410:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     412:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     416:	10 92 08 01 	sts	0x0108, r1
}
     41a:	08 95       	ret

0000041c <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
	DDRA = DDRA | 0x0F;
     41c:	81 b1       	in	r24, 0x01	; 1
     41e:	8f 60       	ori	r24, 0x0F	; 15
     420:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     422:	82 b1       	in	r24, 0x02	; 2
     424:	80 7f       	andi	r24, 0xF0	; 240
     426:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     428:	ea e0       	ldi	r30, 0x0A	; 10
     42a:	f1 e0       	ldi	r31, 0x01	; 1
     42c:	80 81       	ld	r24, Z
     42e:	88 61       	ori	r24, 0x18	; 24
     430:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     432:	eb e0       	ldi	r30, 0x0B	; 11
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	80 81       	ld	r24, Z
     438:	88 61       	ori	r24, 0x18	; 24
     43a:	80 83       	st	Z, r24
}
     43c:	08 95       	ret

0000043e <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();	adc_pin_config();
     43e:	0e 94 00 02 	call	0x400	; 0x400 <lcd_port_config>
     442:	0e 94 07 02 	call	0x40e	; 0x40e <adc_pin_config>
	motion_pin_config();
     446:	0e 94 0e 02 	call	0x41c	; 0x41c <motion_pin_config>
	spi_pin_config();	
     44a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <spi_pin_config>
}
     44e:	08 95       	ret

00000450 <spi_init>:

//Function To Initialize SPI bus
// clock rate: 921600hz
void spi_init(void)
{
	SPCR = 0x53; //setup SPI
     450:	83 e5       	ldi	r24, 0x53	; 83
     452:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; //setup SPI
     454:	1d bc       	out	0x2d, r1	; 45
	SPDR = 0x00;
     456:	1e bc       	out	0x2e, r1	; 46
}
     458:	08 95       	ret

0000045a <spi_master_tx_and_rx>:
*/
unsigned char spi_master_tx_and_rx (unsigned char data)
{
	unsigned char rx_data = 0;

	PORTB = PORTB & 0xFE; // make SS pin low
     45a:	28 98       	cbi	0x05, 0	; 5
	SPDR = data;
     45c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data transmission to complete
     45e:	0d b4       	in	r0, 0x2d	; 45
     460:	07 fe       	sbrs	r0, 7
     462:	fd cf       	rjmp	.-6      	; 0x45e <spi_master_tx_and_rx+0x4>
     464:	86 e6       	ldi	r24, 0x66	; 102
     466:	9e e0       	ldi	r25, 0x0E	; 14
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <spi_master_tx_and_rx+0xe>
     46c:	00 00       	nop

	_delay_ms(1); //time for ADC conversion in the slave microcontroller
	
	SPDR = 0x50; // send dummy byte to read back data from the slave microcontroller
     46e:	80 e5       	ldi	r24, 0x50	; 80
     470:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for data reception to complete
     472:	0d b4       	in	r0, 0x2d	; 45
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <spi_master_tx_and_rx+0x18>
	rx_data = SPDR;
     478:	8e b5       	in	r24, 0x2e	; 46
	PORTB = PORTB | 0x01; // make SS high
     47a:	28 9a       	sbi	0x05, 0	; 5
	return rx_data;
}
     47c:	08 95       	ret

0000047e <timer5_init>:
  // PWM 8bit fast, TOP=0x00FF
  // Timer Frequency:225.000Hz
*/
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     47e:	e1 e2       	ldi	r30, 0x21	; 33
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     490:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     494:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     498:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     49c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     4a0:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     4a4:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     4a8:	89 ea       	ldi	r24, 0xA9	; 169
     4aa:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     4ae:	8b e0       	ldi	r24, 0x0B	; 11
     4b0:	80 83       	st	Z, r24
}
     4b2:	08 95       	ret

000004b4 <adc_init>:
/*
  //Function Name -  adc_init
*/
void adc_init()
{
	ADCSRA = 0x00;
     4b4:	ea e7       	ldi	r30, 0x7A	; 122
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     4ba:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     4c4:	80 e8       	ldi	r24, 0x80	; 128
     4c6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     4c8:	86 e8       	ldi	r24, 0x86	; 134
     4ca:	80 83       	st	Z, r24
}
     4cc:	08 95       	ret

000004ce <ADC_Conversion>:
  //Logic - convert sensor values to digital
*/
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     4ce:	88 30       	cpi	r24, 0x08	; 8
     4d0:	18 f0       	brcs	.+6      	; 0x4d8 <ADC_Conversion+0xa>
	{
 		ADCSRB = 0x08;
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     4d8:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     4da:	80 62       	ori	r24, 0x20	; 32
     4dc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     4e0:	ea e7       	ldi	r30, 0x7A	; 122
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	80 64       	ori	r24, 0x40	; 64
     4e8:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     4ea:	80 81       	ld	r24, Z
     4ec:	84 ff       	sbrs	r24, 4
     4ee:	fd cf       	rjmp	.-6      	; 0x4ea <ADC_Conversion+0x1c>
	a=ADCH;
     4f0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4f4:	ea e7       	ldi	r30, 0x7A	; 122
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	90 81       	ld	r25, Z
     4fa:	90 61       	ori	r25, 0x10	; 16
     4fc:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     4fe:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     502:	08 95       	ret

00000504 <print_sensor>:
/*
  //Function Name -  print_sensor
  //Logic - print values on desired row and column
*/
int print_sensor(char row, char coloumn,unsigned char channel)
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	d8 2f       	mov	r29, r24
     50a:	c6 2f       	mov	r28, r22
     50c:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     50e:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
     512:	48 2f       	mov	r20, r24
     514:	80 93 22 02 	sts	0x0222, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     518:	8d 2f       	mov	r24, r29
     51a:	6c 2f       	mov	r22, r28
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	23 e0       	ldi	r18, 0x03	; 3
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	
	return ADC_Value ;
}
     526:	80 91 22 02 	lds	r24, 0x0222
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <velocity>:
  //Function Name -  velocity
  //Logic - control velocity of motors
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     532:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     536:	60 93 2a 01 	sts	0x012A, r22
}
     53a:	08 95       	ret

0000053c <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     53c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     53e:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     540:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     542:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     544:	92 b9       	out	0x02, r25	; 2
}
     546:	08 95       	ret

00000548 <forward>:

void forward (void) 
{
	motion_set (0x06);
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
     54e:	08 95       	ret

00000550 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
     556:	08 95       	ret

00000558 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     558:	8a e0       	ldi	r24, 0x0A	; 10
     55a:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
     55e:	08 95       	ret

00000560 <stop>:

void stop (void)
{
  motion_set (0x00);
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 9e 02 	call	0x53c	; 0x53c <motion_set>
}
     566:	08 95       	ret

00000568 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     568:	e1 ec       	ldi	r30, 0xC1	; 193
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     56e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
     578:	8f e5       	ldi	r24, 0x5F	; 95
     57a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     57e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     582:	88 e9       	ldi	r24, 0x98	; 152
     584:	80 83       	st	Z, r24
}
     586:	08 95       	ret

00000588 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	cf 93       	push	r28
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
     5b0:	e6 ec       	ldi	r30, 0xC6	; 198
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	c0 81       	ld	r28, Z
     5b6:	c0 93 29 02 	sts	0x0229, r28

	UDR0 = data; 				//echo data back to PC
     5ba:	c0 83       	st	Z, r28

	if(data == 0x50) //ASCII value of P
     5bc:	c0 35       	cpi	r28, 0x50	; 80
     5be:	c9 f4       	brne	.+50     	; 0x5f2 <__vector_25+0x6a>
	{
		Kp=Kp+0.01;
     5c0:	60 91 04 02 	lds	r22, 0x0204
     5c4:	70 91 05 02 	lds	r23, 0x0205
     5c8:	80 91 06 02 	lds	r24, 0x0206
     5cc:	90 91 07 02 	lds	r25, 0x0207
     5d0:	2a e0       	ldi	r18, 0x0A	; 10
     5d2:	37 ed       	ldi	r19, 0xD7	; 215
     5d4:	43 e2       	ldi	r20, 0x23	; 35
     5d6:	5c e3       	ldi	r21, 0x3C	; 60
     5d8:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	80 93 04 02 	sts	0x0204, r24
     5e4:	90 93 05 02 	sts	0x0205, r25
     5e8:	a0 93 06 02 	sts	0x0206, r26
     5ec:	b0 93 07 02 	sts	0x0207, r27
     5f0:	36 c0       	rjmp	.+108    	; 0x65e <__vector_25+0xd6>
	}

	if(data == 0x70) //ASCII value of p
     5f2:	c0 37       	cpi	r28, 0x70	; 112
     5f4:	c9 f4       	brne	.+50     	; 0x628 <__vector_25+0xa0>
	{
		Kp=Kp-0.01;
     5f6:	60 91 04 02 	lds	r22, 0x0204
     5fa:	70 91 05 02 	lds	r23, 0x0205
     5fe:	80 91 06 02 	lds	r24, 0x0206
     602:	90 91 07 02 	lds	r25, 0x0207
     606:	2a e0       	ldi	r18, 0x0A	; 10
     608:	37 ed       	ldi	r19, 0xD7	; 215
     60a:	43 e2       	ldi	r20, 0x23	; 35
     60c:	5c e3       	ldi	r21, 0x3C	; 60
     60e:	0e 94 7c 07 	call	0xef8	; 0xef8 <__subsf3>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	80 93 04 02 	sts	0x0204, r24
     61a:	90 93 05 02 	sts	0x0205, r25
     61e:	a0 93 06 02 	sts	0x0206, r26
     622:	b0 93 07 02 	sts	0x0207, r27
     626:	36 c0       	rjmp	.+108    	; 0x694 <__vector_25+0x10c>
	}

	if(data == 0x49) //ASCII value of I
     628:	c9 34       	cpi	r28, 0x49	; 73
     62a:	c9 f4       	brne	.+50     	; 0x65e <__vector_25+0xd6>
	{
		Ki=Ki+0.001;
     62c:	60 91 08 02 	lds	r22, 0x0208
     630:	70 91 09 02 	lds	r23, 0x0209
     634:	80 91 0a 02 	lds	r24, 0x020A
     638:	90 91 0b 02 	lds	r25, 0x020B
     63c:	2f e6       	ldi	r18, 0x6F	; 111
     63e:	32 e1       	ldi	r19, 0x12	; 18
     640:	43 e8       	ldi	r20, 0x83	; 131
     642:	5a e3       	ldi	r21, 0x3A	; 58
     644:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	80 93 08 02 	sts	0x0208, r24
     650:	90 93 09 02 	sts	0x0209, r25
     654:	a0 93 0a 02 	sts	0x020A, r26
     658:	b0 93 0b 02 	sts	0x020B, r27
     65c:	36 c0       	rjmp	.+108    	; 0x6ca <__vector_25+0x142>
	}

	if(data == 0x69) //ASCII value of i
     65e:	c9 36       	cpi	r28, 0x69	; 105
     660:	c9 f4       	brne	.+50     	; 0x694 <__vector_25+0x10c>
	{
		Ki=Ki-0.001;
     662:	60 91 08 02 	lds	r22, 0x0208
     666:	70 91 09 02 	lds	r23, 0x0209
     66a:	80 91 0a 02 	lds	r24, 0x020A
     66e:	90 91 0b 02 	lds	r25, 0x020B
     672:	2f e6       	ldi	r18, 0x6F	; 111
     674:	32 e1       	ldi	r19, 0x12	; 18
     676:	43 e8       	ldi	r20, 0x83	; 131
     678:	5a e3       	ldi	r21, 0x3A	; 58
     67a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__subsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	80 93 08 02 	sts	0x0208, r24
     686:	90 93 09 02 	sts	0x0209, r25
     68a:	a0 93 0a 02 	sts	0x020A, r26
     68e:	b0 93 0b 02 	sts	0x020B, r27
     692:	35 c0       	rjmp	.+106    	; 0x6fe <__vector_25+0x176>
	}

	if(data == 0x44) //ASCII value of D
     694:	c4 34       	cpi	r28, 0x44	; 68
     696:	c9 f4       	brne	.+50     	; 0x6ca <__vector_25+0x142>
	{
		Kd=Kd+0.01;
     698:	60 91 00 02 	lds	r22, 0x0200
     69c:	70 91 01 02 	lds	r23, 0x0201
     6a0:	80 91 02 02 	lds	r24, 0x0202
     6a4:	90 91 03 02 	lds	r25, 0x0203
     6a8:	2a e0       	ldi	r18, 0x0A	; 10
     6aa:	37 ed       	ldi	r19, 0xD7	; 215
     6ac:	43 e2       	ldi	r20, 0x23	; 35
     6ae:	5c e3       	ldi	r21, 0x3C	; 60
     6b0:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	80 93 00 02 	sts	0x0200, r24
     6bc:	90 93 01 02 	sts	0x0201, r25
     6c0:	a0 93 02 02 	sts	0x0202, r26
     6c4:	b0 93 03 02 	sts	0x0203, r27
     6c8:	1a c0       	rjmp	.+52     	; 0x6fe <__vector_25+0x176>
	}

	if(data == 0x64) //ASCII value of d
     6ca:	c4 36       	cpi	r28, 0x64	; 100
     6cc:	c1 f4       	brne	.+48     	; 0x6fe <__vector_25+0x176>
	{
		Kd=Kd-0.01;
     6ce:	60 91 00 02 	lds	r22, 0x0200
     6d2:	70 91 01 02 	lds	r23, 0x0201
     6d6:	80 91 02 02 	lds	r24, 0x0202
     6da:	90 91 03 02 	lds	r25, 0x0203
     6de:	2a e0       	ldi	r18, 0x0A	; 10
     6e0:	37 ed       	ldi	r19, 0xD7	; 215
     6e2:	43 e2       	ldi	r20, 0x23	; 35
     6e4:	5c e3       	ldi	r21, 0x3C	; 60
     6e6:	0e 94 7c 07 	call	0xef8	; 0xef8 <__subsf3>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	80 93 00 02 	sts	0x0200, r24
     6f2:	90 93 01 02 	sts	0x0201, r25
     6f6:	a0 93 02 02 	sts	0x0202, r26
     6fa:	b0 93 03 02 	sts	0x0203, r27
	}
}
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	cf 91       	pop	r28
     704:	bf 91       	pop	r27
     706:	af 91       	pop	r26
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	7f 91       	pop	r23
     70e:	6f 91       	pop	r22
     710:	5f 91       	pop	r21
     712:	4f 91       	pop	r20
     714:	3f 91       	pop	r19
     716:	2f 91       	pop	r18
     718:	0f 90       	pop	r0
     71a:	0b be       	out	0x3b, r0	; 59
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <init_devices>:
  //Function Name -  init_devices
  //Logic - intitialization
*/
void init_devices (void)
{
 	cli(); //Clears the global interrupts
     726:	f8 94       	cli
    spi_init();
     728:	0e 94 28 02 	call	0x450	; 0x450 <spi_init>
	port_init();
     72c:	0e 94 1f 02 	call	0x43e	; 0x43e <port_init>
	adc_init();
     730:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <adc_init>
	timer5_init();
     734:	0e 94 3f 02 	call	0x47e	; 0x47e <timer5_init>
	uart0_init(); //Initailize UART1 for serial communiaction
     738:	0e 94 b4 02 	call	0x568	; 0x568 <uart0_init>
	sei();   //Enables the global interrupts
     73c:	78 94       	sei
}
     73e:	08 95       	ret

00000740 <sensor_on_line>:
  //Output - 0 or 1
  //Logic - compare with threshold value of white line if it is online then return 1 else 0
*/
sensor_on_line(int sensor)
{
	reading = sensor/10;
     740:	6a e0       	ldi	r22, 0x0A	; 10
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
	reading = 10*reading;
     748:	cb 01       	movw	r24, r22
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	66 0f       	add	r22, r22
     750:	77 1f       	adc	r23, r23
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	66 0f       	add	r22, r22
     758:	77 1f       	adc	r23, r23
     75a:	86 0f       	add	r24, r22
     75c:	97 1f       	adc	r25, r23
     75e:	80 93 23 02 	sts	0x0223, r24
     762:	90 93 24 02 	sts	0x0224, r25
	return 	reading;
}
     766:	08 95       	ret

00000768 <PID>:
  //Input - error corresponding to sensor which is on line
  //Output - correction value which will be added in left and right motor speed
  //Logic - calculate P,I and D errors individualy and add them.
*/
signed int PID(signed int position)
{
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
	
	proportional = position - setpoint; // The "proportional" term should be 0 when we are on the white line.
     778:	20 91 0e 02 	lds	r18, 0x020E
     77c:	30 91 0f 02 	lds	r19, 0x020F
     780:	7c 01       	movw	r14, r24
     782:	e2 1a       	sub	r14, r18
     784:	f3 0a       	sbc	r15, r19
     786:	f0 92 26 02 	sts	0x0226, r15
     78a:	e0 92 25 02 	sts	0x0225, r14
	if(count == 0)
     78e:	80 91 0c 02 	lds	r24, 0x020C
     792:	90 91 0d 02 	lds	r25, 0x020D
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	09 f0       	breq	.+2      	; 0x79c <PID+0x34>
     79a:	b6 c0       	rjmp	.+364    	; 0x908 <PID+0x1a0>
	{
		integral += proportional/2;  // Compute the integral (sum) of the position using proportional error.
     79c:	b7 01       	movw	r22, r14
     79e:	ff 20       	and	r15, r15
     7a0:	14 f4       	brge	.+4      	; 0x7a6 <PID+0x3e>
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	75 95       	asr	r23
     7a8:	67 95       	ror	r22
     7aa:	88 27       	eor	r24, r24
     7ac:	77 fd       	sbrc	r23, 7
     7ae:	80 95       	com	r24
     7b0:	98 2f       	mov	r25, r24
     7b2:	0e 94 18 08 	call	0x1030	; 0x1030 <__floatsisf>
     7b6:	20 91 44 02 	lds	r18, 0x0244
     7ba:	30 91 45 02 	lds	r19, 0x0245
     7be:	40 91 46 02 	lds	r20, 0x0246
     7c2:	50 91 47 02 	lds	r21, 0x0247
     7c6:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     7ca:	16 2f       	mov	r17, r22
     7cc:	d7 2f       	mov	r29, r23
     7ce:	c8 2f       	mov	r28, r24
     7d0:	c9 2e       	mov	r12, r25
     7d2:	86 2f       	mov	r24, r22
     7d4:	9d 2f       	mov	r25, r29
     7d6:	ac 2f       	mov	r26, r28
     7d8:	bc 2d       	mov	r27, r12
     7da:	80 93 44 02 	sts	0x0244, r24
     7de:	90 93 45 02 	sts	0x0245, r25
     7e2:	a0 93 46 02 	sts	0x0246, r26
     7e6:	b0 93 47 02 	sts	0x0247, r27
		if (integral < -200 )
     7ea:	bc 01       	movw	r22, r24
     7ec:	cd 01       	movw	r24, r26
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	48 e4       	ldi	r20, 0x48	; 72
     7f4:	53 ec       	ldi	r21, 0xC3	; 195
     7f6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__cmpsf2>
     7fa:	88 23       	and	r24, r24
     7fc:	6c f4       	brge	.+26     	; 0x818 <PID+0xb0>
		{
			integral = -200 ;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a8 e4       	ldi	r26, 0x48	; 72
     804:	b3 ec       	ldi	r27, 0xC3	; 195
     806:	80 93 44 02 	sts	0x0244, r24
     80a:	90 93 45 02 	sts	0x0245, r25
     80e:	a0 93 46 02 	sts	0x0246, r26
     812:	b0 93 47 02 	sts	0x0247, r27
     816:	1a c0       	rjmp	.+52     	; 0x84c <PID+0xe4>
		}
		if (integral > 200)
     818:	81 2f       	mov	r24, r17
     81a:	9d 2f       	mov	r25, r29
     81c:	ac 2f       	mov	r26, r28
     81e:	bc 2d       	mov	r27, r12
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 e4       	ldi	r20, 0x48	; 72
     82a:	53 e4       	ldi	r21, 0x43	; 67
     82c:	0e 94 c8 08 	call	0x1190	; 0x1190 <__gesf2>
     830:	18 16       	cp	r1, r24
     832:	64 f4       	brge	.+24     	; 0x84c <PID+0xe4>
		{
			integral = 200 ;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a8 e4       	ldi	r26, 0x48	; 72
     83a:	b3 e4       	ldi	r27, 0x43	; 67
     83c:	80 93 44 02 	sts	0x0244, r24
     840:	90 93 45 02 	sts	0x0245, r25
     844:	a0 93 46 02 	sts	0x0246, r26
     848:	b0 93 47 02 	sts	0x0247, r27
		}
		derivative = (proportional - last_proportional)/2; //compute derivative using past and present proportional value.
     84c:	80 91 1c 02 	lds	r24, 0x021C
     850:	90 91 1d 02 	lds	r25, 0x021D
     854:	b7 01       	movw	r22, r14
     856:	68 1b       	sub	r22, r24
     858:	79 0b       	sbc	r23, r25
     85a:	12 f4       	brpl	.+4      	; 0x860 <PID+0xf8>
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	75 95       	asr	r23
     862:	67 95       	ror	r22
     864:	88 27       	eor	r24, r24
     866:	77 fd       	sbrc	r23, 7
     868:	80 95       	com	r24
     86a:	98 2f       	mov	r25, r24
     86c:	0e 94 18 08 	call	0x1030	; 0x1030 <__floatsisf>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	80 93 14 02 	sts	0x0214, r24
     878:	90 93 15 02 	sts	0x0215, r25
     87c:	a0 93 16 02 	sts	0x0216, r26
     880:	b0 93 17 02 	sts	0x0217, r27
		
		count = 3;
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	90 93 0d 02 	sts	0x020D, r25
     88c:	80 93 0c 02 	sts	0x020C, r24
		
		lcd_print(1,10,500-proportional,3);
     890:	44 ef       	ldi	r20, 0xF4	; 244
     892:	51 e0       	ldi	r21, 0x01	; 1
     894:	4e 19       	sub	r20, r14
     896:	5f 09       	sbc	r21, r15
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	6a e0       	ldi	r22, 0x0A	; 10
     89c:	23 e0       	ldi	r18, 0x03	; 3
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		lcd_print(2,9,500-integral,3);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	8a ef       	ldi	r24, 0xFA	; 250
     8aa:	93 e4       	ldi	r25, 0x43	; 67
     8ac:	20 91 44 02 	lds	r18, 0x0244
     8b0:	30 91 45 02 	lds	r19, 0x0245
     8b4:	40 91 46 02 	lds	r20, 0x0246
     8b8:	50 91 47 02 	lds	r21, 0x0247
     8bc:	0e 94 7c 07 	call	0xef8	; 0xef8 <__subsf3>
     8c0:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     8c4:	8b 01       	movw	r16, r22
     8c6:	9c 01       	movw	r18, r24
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	69 e0       	ldi	r22, 0x09	; 9
     8cc:	a8 01       	movw	r20, r16
     8ce:	23 e0       	ldi	r18, 0x03	; 3
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		lcd_print(2,14,500-derivative,3);
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	8a ef       	ldi	r24, 0xFA	; 250
     8dc:	93 e4       	ldi	r25, 0x43	; 67
     8de:	20 91 14 02 	lds	r18, 0x0214
     8e2:	30 91 15 02 	lds	r19, 0x0215
     8e6:	40 91 16 02 	lds	r20, 0x0216
     8ea:	50 91 17 02 	lds	r21, 0x0217
     8ee:	0e 94 7c 07 	call	0xef8	; 0xef8 <__subsf3>
     8f2:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     8f6:	8b 01       	movw	r16, r22
     8f8:	9c 01       	movw	r18, r24
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	6e e0       	ldi	r22, 0x0E	; 14
     8fe:	a8 01       	movw	r20, r16
     900:	23 e0       	ldi	r18, 0x03	; 3
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	}	
	last_proportional = proportional; // Remember the last position.	
     908:	60 91 25 02 	lds	r22, 0x0225
     90c:	70 91 26 02 	lds	r23, 0x0226
     910:	70 93 1d 02 	sts	0x021D, r23
     914:	60 93 1c 02 	sts	0x021C, r22
	correction = proportional*Kp + integral*Ki + derivative*Kd ;
     918:	88 27       	eor	r24, r24
     91a:	77 fd       	sbrc	r23, 7
     91c:	80 95       	com	r24
     91e:	98 2f       	mov	r25, r24
     920:	0e 94 18 08 	call	0x1030	; 0x1030 <__floatsisf>
     924:	20 91 04 02 	lds	r18, 0x0204
     928:	30 91 05 02 	lds	r19, 0x0205
     92c:	40 91 06 02 	lds	r20, 0x0206
     930:	50 91 07 02 	lds	r21, 0x0207
     934:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     938:	6b 01       	movw	r12, r22
     93a:	7c 01       	movw	r14, r24
     93c:	60 91 44 02 	lds	r22, 0x0244
     940:	70 91 45 02 	lds	r23, 0x0245
     944:	80 91 46 02 	lds	r24, 0x0246
     948:	90 91 47 02 	lds	r25, 0x0247
     94c:	20 91 08 02 	lds	r18, 0x0208
     950:	30 91 09 02 	lds	r19, 0x0209
     954:	40 91 0a 02 	lds	r20, 0x020A
     958:	50 91 0b 02 	lds	r21, 0x020B
     95c:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     96c:	6b 01       	movw	r12, r22
     96e:	7c 01       	movw	r14, r24
     970:	60 91 14 02 	lds	r22, 0x0214
     974:	70 91 15 02 	lds	r23, 0x0215
     978:	80 91 16 02 	lds	r24, 0x0216
     97c:	90 91 17 02 	lds	r25, 0x0217
     980:	20 91 00 02 	lds	r18, 0x0200
     984:	30 91 01 02 	lds	r19, 0x0201
     988:	40 91 02 02 	lds	r20, 0x0202
     98c:	50 91 03 02 	lds	r21, 0x0203
     990:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     994:	9b 01       	movw	r18, r22
     996:	ac 01       	movw	r20, r24
     998:	c7 01       	movw	r24, r14
     99a:	b6 01       	movw	r22, r12
     99c:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3>
     9a0:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     9a4:	60 93 2a 02 	sts	0x022A, r22
     9a8:	70 93 2b 02 	sts	0x022B, r23
	count-- ;	
     9ac:	20 91 0c 02 	lds	r18, 0x020C
     9b0:	30 91 0d 02 	lds	r19, 0x020D
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	30 40       	sbci	r19, 0x00	; 0
     9b8:	30 93 0d 02 	sts	0x020D, r19
     9bc:	20 93 0c 02 	sts	0x020C, r18
	return correction ;
	
}
     9c0:	86 2f       	mov	r24, r22
     9c2:	97 2f       	mov	r25, r23
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <SetTunings>:
  //Input - Nothing
  //Output - set Kp,Ki and Kd values for further use.
  //Logic - assign Kp, ki and Kd values manually.
*/
void SetTunings()
{
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
	lcd_print(1,1,100*Kp,2);
     9da:	60 91 04 02 	lds	r22, 0x0204
     9de:	70 91 05 02 	lds	r23, 0x0205
     9e2:	80 91 06 02 	lds	r24, 0x0206
     9e6:	90 91 07 02 	lds	r25, 0x0207
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	48 ec       	ldi	r20, 0xC8	; 200
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     9f6:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     9fa:	8b 01       	movw	r16, r22
     9fc:	9c 01       	movw	r18, r24
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	a8 01       	movw	r20, r16
     a04:	22 e0       	ldi	r18, 0x02	; 2
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	lcd_print(1,4,1000*Ki,2);
     a0c:	60 91 08 02 	lds	r22, 0x0208
     a10:	70 91 09 02 	lds	r23, 0x0209
     a14:	80 91 0a 02 	lds	r24, 0x020A
     a18:	90 91 0b 02 	lds	r25, 0x020B
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	4a e7       	ldi	r20, 0x7A	; 122
     a22:	54 e4       	ldi	r21, 0x44	; 68
     a24:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     a28:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     a2c:	8b 01       	movw	r16, r22
     a2e:	9c 01       	movw	r18, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	64 e0       	ldi	r22, 0x04	; 4
     a34:	a8 01       	movw	r20, r16
     a36:	22 e0       	ldi	r18, 0x02	; 2
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	lcd_print(1,7,100*Kd,2);
     a3e:	60 91 00 02 	lds	r22, 0x0200
     a42:	70 91 01 02 	lds	r23, 0x0201
     a46:	80 91 02 02 	lds	r24, 0x0202
     a4a:	90 91 03 02 	lds	r25, 0x0203
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	48 ec       	ldi	r20, 0xC8	; 200
     a54:	52 e4       	ldi	r21, 0x42	; 66
     a56:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3>
     a5a:	0e 94 e5 07 	call	0xfca	; 0xfca <__fixsfsi>
     a5e:	8b 01       	movw	r16, r22
     a60:	9c 01       	movw	r18, r24
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	67 e0       	ldi	r22, 0x07	; 7
     a66:	a8 01       	movw	r20, r16
     a68:	22 e0       	ldi	r18, 0x02	; 2
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
}
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <main>:
  //Input - Nothing
  //Output - control left and right Motor speeds
  //Logic - add pid correction error here.
*/
int main()
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	0f 92       	push	r0
     a7c:	0f 92       	push	r0
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
	init_devices();
     a82:	0e 94 93 03 	call	0x726	; 0x726 <init_devices>
	lcd_set_4bit();
     a86:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
     a8a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	signed int max = 250 ; 
	speed_L = 250;
     a8e:	8a ef       	ldi	r24, 0xFA	; 250
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 43 02 	sts	0x0243, r25
     a96:	80 93 42 02 	sts	0x0242, r24
	speed_R = 250;
     a9a:	90 93 5b 02 	sts	0x025B, r25
     a9e:	80 93 5a 02 	sts	0x025A, r24
	
	while(1)
	{

		data_received [0] = ADC_Conversion(3);	//Getting data of sensor-0 WL Sensor
		data_received [1] = ADC_Conversion(2);	//Getting data of sensor-1 WL Sensor
     aa2:	22 24       	eor	r2, r2
     aa4:	33 24       	eor	r3, r3
     aa6:	68 94       	set
     aa8:	21 f8       	bld	r2, 1
     aaa:	80 e3       	ldi	r24, 0x30	; 48
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	28 0e       	add	r2, r24
     ab0:	39 1e       	adc	r3, r25
		lcd_print(1, 11,data_received [5], 1);
		lcd_print(1, 13,data_received [6], 1);
        */
		SetTunings();
		
		sensor_value[0] = sensor_on_line(data_received [0]);
     ab2:	0a e4       	ldi	r16, 0x4A	; 74
     ab4:	12 e0       	ldi	r17, 0x02	; 2
				}
				else
				{
					while(1)
					{
						data_received [5] = spi_master_tx_and_rx(2);
     ab6:	0f 2e       	mov	r0, r31
     ab8:	fa e3       	ldi	r31, 0x3A	; 58
     aba:	cf 2e       	mov	r12, r31
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	df 2e       	mov	r13, r31
     ac0:	f0 2d       	mov	r31, r0
						if(data_received [5]<100)
						{
							break;
						}
						right();
						velocity(speed_L-100,speed_R-100);
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f2 e4       	ldi	r31, 0x42	; 66
     ac6:	8f 2e       	mov	r8, r31
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	9f 2e       	mov	r9, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	0f 2e       	mov	r0, r31
     ad0:	fa e5       	ldi	r31, 0x5A	; 90
     ad2:	6f 2e       	mov	r6, r31
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	7f 2e       	mov	r7, r31
     ad8:	f0 2d       	mov	r31, r0
				}
				else
				{
					while(1)
					{
						data_received [1] = ADC_Conversion(2);
     ada:	0f 2e       	mov	r0, r31
     adc:	f2 e3       	ldi	r31, 0x32	; 50
     ade:	4f 2e       	mov	r4, r31
     ae0:	f2 e0       	ldi	r31, 0x02	; 2
     ae2:	5f 2e       	mov	r5, r31
     ae4:	f0 2d       	mov	r31, r0
	speed_R = 250;
	
	while(1)
	{

		data_received [0] = ADC_Conversion(3);	//Getting data of sensor-0 WL Sensor
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
     aec:	a0 e3       	ldi	r26, 0x30	; 48
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	8c 93       	st	X, r24
     af2:	10 92 31 02 	sts	0x0231, r1
		data_received [1] = ADC_Conversion(2);	//Getting data of sensor-1 WL Sensor
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
     afc:	f1 01       	movw	r30, r2
     afe:	80 83       	st	Z, r24
     b00:	11 82       	std	Z+1, r1	; 0x01
		data_received [2] = ADC_Conversion(1);	//Getting data of sensor-2 WL Sensor
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
     b08:	80 93 34 02 	sts	0x0234, r24
     b0c:	10 92 35 02 	sts	0x0235, r1
        data_received [3] = spi_master_tx_and_rx(0); //Getting data of sensor-3 WL sensor connected to slave microcontroller.
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
     b16:	80 93 36 02 	sts	0x0236, r24
     b1a:	10 92 37 02 	sts	0x0237, r1
        data_received [4] = spi_master_tx_and_rx(1); //Getting data of sensor-4 WL sensor connected to slave microcontroller.
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
     b24:	80 93 38 02 	sts	0x0238, r24
     b28:	10 92 39 02 	sts	0x0239, r1
        data_received [5] = spi_master_tx_and_rx(2); //Getting data of sensor-5 WL sensor connected to slave microcontroller.
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
     b32:	80 93 3a 02 	sts	0x023A, r24
     b36:	10 92 3b 02 	sts	0x023B, r1
		data_received [6] = spi_master_tx_and_rx(3); //Getting data of sensor-6 WL sensor connected to slave microcontroller.
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
     b40:	80 93 3c 02 	sts	0x023C, r24
     b44:	10 92 3d 02 	sts	0x023D, r1
		lcd_print(1, 7,data_received [3], 1);
		lcd_print(1, 9,data_received [4], 1);
		lcd_print(1, 11,data_received [5], 1);
		lcd_print(1, 13,data_received [6], 1);
        */
		SetTunings();
     b48:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <SetTunings>
		
		sensor_value[0] = sensor_on_line(data_received [0]);
     b4c:	a0 e3       	ldi	r26, 0x30	; 48
     b4e:	b2 e0       	ldi	r27, 0x02	; 2
     b50:	8d 91       	ld	r24, X+
     b52:	9c 91       	ld	r25, X
     b54:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     b58:	f8 01       	movw	r30, r16
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	80 83       	st	Z, r24
		sensor_value[1] = sensor_on_line(data_received [1]);
     b5e:	d1 01       	movw	r26, r2
     b60:	8d 91       	ld	r24, X+
     b62:	9c 91       	ld	r25, X
     b64:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     b68:	ec e4       	ldi	r30, 0x4C	; 76
     b6a:	f2 e0       	ldi	r31, 0x02	; 2
     b6c:	91 83       	std	Z+1, r25	; 0x01
     b6e:	80 83       	st	Z, r24
		sensor_value[2] = sensor_on_line(data_received [2]);
     b70:	80 91 34 02 	lds	r24, 0x0234
     b74:	90 91 35 02 	lds	r25, 0x0235
     b78:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     b7c:	d8 01       	movw	r26, r16
     b7e:	15 96       	adiw	r26, 0x05	; 5
     b80:	9c 93       	st	X, r25
     b82:	8e 93       	st	-X, r24
     b84:	14 97       	sbiw	r26, 0x04	; 4
		sensor_value[3] = sensor_on_line(data_received [3]);
     b86:	80 91 36 02 	lds	r24, 0x0236
     b8a:	90 91 37 02 	lds	r25, 0x0237
     b8e:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     b92:	f8 01       	movw	r30, r16
     b94:	97 83       	std	Z+7, r25	; 0x07
     b96:	86 83       	std	Z+6, r24	; 0x06
		sensor_value[4] = sensor_on_line(data_received [4]);
     b98:	80 91 38 02 	lds	r24, 0x0238
     b9c:	90 91 39 02 	lds	r25, 0x0239
     ba0:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     ba4:	d8 01       	movw	r26, r16
     ba6:	19 96       	adiw	r26, 0x09	; 9
     ba8:	9c 93       	st	X, r25
     baa:	8e 93       	st	-X, r24
     bac:	18 97       	sbiw	r26, 0x08	; 8
		sensor_value[5] = sensor_on_line(data_received [5]);
     bae:	80 91 3a 02 	lds	r24, 0x023A
     bb2:	90 91 3b 02 	lds	r25, 0x023B
     bb6:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     bba:	f8 01       	movw	r30, r16
     bbc:	93 87       	std	Z+11, r25	; 0x0b
     bbe:	82 87       	std	Z+10, r24	; 0x0a
		sensor_value[6] = sensor_on_line(data_received [6]);
     bc0:	80 91 3c 02 	lds	r24, 0x023C
     bc4:	90 91 3d 02 	lds	r25, 0x023D
     bc8:	0e 94 a0 03 	call	0x740	; 0x740 <sensor_on_line>
     bcc:	68 2f       	mov	r22, r24
     bce:	79 2f       	mov	r23, r25
     bd0:	d8 01       	movw	r26, r16
     bd2:	1d 96       	adiw	r26, 0x0d	; 13
     bd4:	7c 93       	st	X, r23
     bd6:	6e 93       	st	-X, r22
     bd8:	1c 97       	sbiw	r26, 0x0c	; 12
		/*senser_value_sum = data_received [0] + data_received [1] + data_received [2] + data_received [3] + data_received [4] + data_received [5] + data_received [6] ;
		
		weight = ((-3)*data_received [0] + (-2)*data_received [1] + (-1)*data_received [2] + (0)*data_received [3] + (1)*data_received [4] + (2)*data_received [5] + (3)*data_received [6]);
		*/
		
		senser_value_sum = sensor_value[0] + sensor_value[1] + sensor_value[2] + sensor_value[3] + sensor_value[4] + sensor_value[5] + sensor_value[6] ;
     bda:	4d 91       	ld	r20, X+
     bdc:	5c 91       	ld	r21, X
     bde:	11 97       	sbiw	r26, 0x01	; 1
     be0:	ec e4       	ldi	r30, 0x4C	; 76
     be2:	f2 e0       	ldi	r31, 0x02	; 2
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	fa 83       	std	Y+2, r31	; 0x02
     bec:	e9 83       	std	Y+1, r30	; 0x01
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	ad 90       	ld	r10, X+
     bf2:	bc 90       	ld	r11, X
     bf4:	15 97       	sbiw	r26, 0x05	; 5
     bf6:	18 96       	adiw	r26, 0x08	; 8
     bf8:	0d 90       	ld	r0, X+
     bfa:	bc 91       	ld	r27, X
     bfc:	a0 2d       	mov	r26, r0
     bfe:	f8 01       	movw	r30, r16
     c00:	e2 84       	ldd	r14, Z+10	; 0x0a
     c02:	f3 84       	ldd	r15, Z+11	; 0x0b
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	84 0f       	add	r24, r20
     c0a:	95 1f       	adc	r25, r21
     c0c:	8a 0d       	add	r24, r10
     c0e:	9b 1d       	adc	r25, r11
     c10:	26 81       	ldd	r18, Z+6	; 0x06
     c12:	37 81       	ldd	r19, Z+7	; 0x07
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	8a 0f       	add	r24, r26
     c1a:	9b 1f       	adc	r25, r27
     c1c:	8e 0d       	add	r24, r14
     c1e:	9f 1d       	adc	r25, r15
     c20:	86 0f       	add	r24, r22
     c22:	97 1f       	adc	r25, r23
     c24:	90 93 2f 02 	sts	0x022F, r25
     c28:	80 93 2e 02 	sts	0x022E, r24
		
		weight = ((-3)*sensor_value[0] + (-2)*sensor_value[1]+ (-1)*sensor_value[2] + (0)*sensor_value[3] + (1)*sensor_value[4] + (2)*sensor_value[5] + (3)*sensor_value[6]);
     c2c:	ca 01       	movw	r24, r20
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	48 0f       	add	r20, r24
     c34:	59 1f       	adc	r21, r25
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	90 95       	com	r25
     c3c:	81 95       	neg	r24
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	84 1b       	sub	r24, r20
     c46:	95 0b       	sbc	r25, r21
     c48:	9c 01       	movw	r18, r24
     c4a:	2a 0f       	add	r18, r26
     c4c:	3b 1f       	adc	r19, r27
     c4e:	c7 01       	movw	r24, r14
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	9c 01       	movw	r18, r24
     c5a:	2a 19       	sub	r18, r10
     c5c:	3b 09       	sbc	r19, r11
     c5e:	cb 01       	movw	r24, r22
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	86 0f       	add	r24, r22
     c66:	97 1f       	adc	r25, r23
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	90 93 59 02 	sts	0x0259, r25
     c70:	80 93 58 02 	sts	0x0258, r24
		
		//control variable
		
		value_on_line = weight ;
     c74:	90 93 49 02 	sts	0x0249, r25
     c78:	80 93 48 02 	sts	0x0248, r24
		lcd_print(1, 11,sensor_value[5], 1);
		lcd_print(1, 13,sensor_value[6], 1);
		*/
		
		
		pid = PID(weight);
     c7c:	0e 94 b4 03 	call	0x768	; 0x768 <PID>
     c80:	90 93 13 02 	sts	0x0213, r25
     c84:	80 93 12 02 	sts	0x0212, r24
		
		//pid = PID(weight); 
		 
		if (pid <= -max)
     c88:	ff ef       	ldi	r31, 0xFF	; 255
     c8a:	87 30       	cpi	r24, 0x07	; 7
     c8c:	9f 07       	cpc	r25, r31
     c8e:	3c f4       	brge	.+14     	; 0xc9e <main+0x228>
		{
			pid = -max ;
     c90:	86 e0       	ldi	r24, 0x06	; 6
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	90 93 13 02 	sts	0x0213, r25
     c98:	80 93 12 02 	sts	0x0212, r24
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <main+0x23a>
		}
		
		if (pid >= max)
     c9e:	8a 3f       	cpi	r24, 0xFA	; 250
     ca0:	91 05       	cpc	r25, r1
     ca2:	34 f0       	brlt	.+12     	; 0xcb0 <main+0x23a>
		{
			pid = max;
     ca4:	8a ef       	ldi	r24, 0xFA	; 250
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 13 02 	sts	0x0213, r25
     cac:	80 93 12 02 	sts	0x0212, r24
		}
		
		if (senser_value_sum>750)
     cb0:	80 91 2e 02 	lds	r24, 0x022E
     cb4:	90 91 2f 02 	lds	r25, 0x022F
     cb8:	22 e0       	ldi	r18, 0x02	; 2
     cba:	8f 3e       	cpi	r24, 0xEF	; 239
     cbc:	92 07       	cpc	r25, r18
     cbe:	1c f0       	brlt	.+6      	; 0xcc6 <main+0x250>
		{
			stop();
     cc0:	0e 94 b0 02 	call	0x560	; 0x560 <stop>
     cc4:	10 cf       	rjmp	.-480    	; 0xae6 <main+0x70>
		}
		else
		{
			if (pid < 10 && pid >-10)
     cc6:	80 91 12 02 	lds	r24, 0x0212
     cca:	90 91 13 02 	lds	r25, 0x0213
     cce:	9c 01       	movw	r18, r24
     cd0:	27 5f       	subi	r18, 0xF7	; 247
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	23 31       	cpi	r18, 0x13	; 19
     cd6:	31 05       	cpc	r19, r1
     cd8:	58 f5       	brcc	.+86     	; 0xd30 <main+0x2ba>
			{
				forward();
     cda:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
				velocity(speed_L,speed_R);
     cde:	d4 01       	movw	r26, r8
     ce0:	8c 91       	ld	r24, X
     ce2:	f3 01       	movw	r30, r6
     ce4:	60 81       	ld	r22, Z
     ce6:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
				lcd_print(2,1,speed_L,3);
     cea:	40 91 42 02 	lds	r20, 0x0242
     cee:	50 91 43 02 	lds	r21, 0x0243
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	23 e0       	ldi	r18, 0x03	; 3
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
				lcd_print(2,5,speed_R,3);
     cfe:	40 91 5a 02 	lds	r20, 0x025A
     d02:	50 91 5b 02 	lds	r21, 0x025B
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	65 e0       	ldi	r22, 0x05	; 5
     d0a:	23 e0       	ldi	r18, 0x03	; 3
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
				lcd_print(1,13,5000-pid,4);
     d12:	80 91 12 02 	lds	r24, 0x0212
     d16:	90 91 13 02 	lds	r25, 0x0213
     d1a:	48 e8       	ldi	r20, 0x88	; 136
     d1c:	53 e1       	ldi	r21, 0x13	; 19
     d1e:	48 1b       	sub	r20, r24
     d20:	59 0b       	sbc	r21, r25
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	6d e0       	ldi	r22, 0x0D	; 13
     d26:	24 e0       	ldi	r18, 0x04	; 4
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
     d2e:	db ce       	rjmp	.-586    	; 0xae6 <main+0x70>
			}
			
			else if(pid>10)
     d30:	8b 30       	cpi	r24, 0x0B	; 11
     d32:	91 05       	cpc	r25, r1
     d34:	0c f4       	brge	.+2      	; 0xd38 <main+0x2c2>
     d36:	6f c0       	rjmp	.+222    	; 0xe16 <main+0x3a0>
			{
				if(pid < 180)
     d38:	84 3b       	cpi	r24, 0xB4	; 180
     d3a:	91 05       	cpc	r25, r1
     d3c:	9c f5       	brge	.+102    	; 0xda4 <main+0x32e>
				{
					forward();
     d3e:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
					velocity(speed_L-pid,speed_R);
     d42:	d4 01       	movw	r26, r8
     d44:	8c 91       	ld	r24, X
     d46:	e2 e1       	ldi	r30, 0x12	; 18
     d48:	f2 e0       	ldi	r31, 0x02	; 2
     d4a:	90 81       	ld	r25, Z
     d4c:	89 1b       	sub	r24, r25
     d4e:	d3 01       	movw	r26, r6
     d50:	6c 91       	ld	r22, X
     d52:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
					lcd_print(2,1,speed_L-pid,3);
     d56:	40 91 42 02 	lds	r20, 0x0242
     d5a:	50 91 43 02 	lds	r21, 0x0243
     d5e:	80 91 12 02 	lds	r24, 0x0212
     d62:	90 91 13 02 	lds	r25, 0x0213
     d66:	48 1b       	sub	r20, r24
     d68:	59 0b       	sbc	r21, r25
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	23 e0       	ldi	r18, 0x03	; 3
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					lcd_print(2,5,speed_R,3);
     d76:	40 91 5a 02 	lds	r20, 0x025A
     d7a:	50 91 5b 02 	lds	r21, 0x025B
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	65 e0       	ldi	r22, 0x05	; 5
     d82:	23 e0       	ldi	r18, 0x03	; 3
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					lcd_print(1,13,5000+pid, 4);
     d8a:	40 91 12 02 	lds	r20, 0x0212
     d8e:	50 91 13 02 	lds	r21, 0x0213
     d92:	48 57       	subi	r20, 0x78	; 120
     d94:	5c 4e       	sbci	r21, 0xEC	; 236
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	6d e0       	ldi	r22, 0x0D	; 13
     d9a:	24 e0       	ldi	r18, 0x04	; 4
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
     da2:	a1 ce       	rjmp	.-702    	; 0xae6 <main+0x70>
				}
				else
				{
					while(1)
					{
						data_received [1] = ADC_Conversion(2);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	0e 94 67 02 	call	0x4ce	; 0x4ce <ADC_Conversion>
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	f2 01       	movw	r30, r4
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
						if(data_received [1] < 100)
     db2:	84 36       	cpi	r24, 0x64	; 100
     db4:	91 05       	cpc	r25, r1
     db6:	08 f4       	brcc	.+2      	; 0xdba <main+0x344>
     db8:	96 ce       	rjmp	.-724    	; 0xae6 <main+0x70>
						{
							break;
						}
						left();
     dba:	0e 94 a8 02 	call	0x550	; 0x550 <left>
						velocity(speed_L-100,speed_R-100);
     dbe:	d4 01       	movw	r26, r8
     dc0:	8c 91       	ld	r24, X
     dc2:	f3 01       	movw	r30, r6
     dc4:	60 81       	ld	r22, Z
     dc6:	64 56       	subi	r22, 0x64	; 100
     dc8:	84 56       	subi	r24, 0x64	; 100
     dca:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
						lcd_print(2,1,speed_L-100,3);
     dce:	40 91 42 02 	lds	r20, 0x0242
     dd2:	50 91 43 02 	lds	r21, 0x0243
     dd6:	44 56       	subi	r20, 0x64	; 100
     dd8:	50 40       	sbci	r21, 0x00	; 0
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	23 e0       	ldi	r18, 0x03	; 3
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
						lcd_print(2,5,speed_R-100,3);
     de6:	40 91 5a 02 	lds	r20, 0x025A
     dea:	50 91 5b 02 	lds	r21, 0x025B
     dee:	44 56       	subi	r20, 0x64	; 100
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	65 e0       	ldi	r22, 0x05	; 5
     df6:	23 e0       	ldi	r18, 0x03	; 3
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
						lcd_print(1,13,500+data_received [1], 4);	
     dfe:	d2 01       	movw	r26, r4
     e00:	4d 91       	ld	r20, X+
     e02:	5c 91       	ld	r21, X
     e04:	4c 50       	subi	r20, 0x0C	; 12
     e06:	5e 4f       	sbci	r21, 0xFE	; 254
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	6d e0       	ldi	r22, 0x0D	; 13
     e0c:	24 e0       	ldi	r18, 0x04	; 4
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					}
     e14:	c7 cf       	rjmp	.-114    	; 0xda4 <main+0x32e>
				
			}
			
			else
			{
				if(pid>-180)
     e16:	bf ef       	ldi	r27, 0xFF	; 255
     e18:	8d 34       	cpi	r24, 0x4D	; 77
     e1a:	9b 07       	cpc	r25, r27
     e1c:	9c f1       	brlt	.+102    	; 0xe84 <main+0x40e>
				{
					forward();
     e1e:	0e 94 a4 02 	call	0x548	; 0x548 <forward>
					velocity(speed_L,speed_R+pid);
     e22:	e2 e1       	ldi	r30, 0x12	; 18
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	60 81       	ld	r22, Z
     e28:	d3 01       	movw	r26, r6
     e2a:	8c 91       	ld	r24, X
     e2c:	68 0f       	add	r22, r24
     e2e:	f4 01       	movw	r30, r8
     e30:	80 81       	ld	r24, Z
     e32:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
					lcd_print(2,1,speed_L,3);
     e36:	40 91 42 02 	lds	r20, 0x0242
     e3a:	50 91 43 02 	lds	r21, 0x0243
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	23 e0       	ldi	r18, 0x03	; 3
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					lcd_print(2,5,speed_R+pid,3);
     e4a:	40 91 5a 02 	lds	r20, 0x025A
     e4e:	50 91 5b 02 	lds	r21, 0x025B
     e52:	80 91 12 02 	lds	r24, 0x0212
     e56:	90 91 13 02 	lds	r25, 0x0213
     e5a:	48 0f       	add	r20, r24
     e5c:	59 1f       	adc	r21, r25
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	65 e0       	ldi	r22, 0x05	; 5
     e62:	23 e0       	ldi	r18, 0x03	; 3
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					lcd_print(1,13,5000+pid, 4);
     e6a:	40 91 12 02 	lds	r20, 0x0212
     e6e:	50 91 13 02 	lds	r21, 0x0213
     e72:	48 57       	subi	r20, 0x78	; 120
     e74:	5c 4e       	sbci	r21, 0xEC	; 236
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	6d e0       	ldi	r22, 0x0D	; 13
     e7a:	24 e0       	ldi	r18, 0x04	; 4
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
     e82:	31 ce       	rjmp	.-926    	; 0xae6 <main+0x70>
				}
				else
				{
					while(1)
					{
						data_received [5] = spi_master_tx_and_rx(2);
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_master_tx_and_rx>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	d6 01       	movw	r26, r12
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
						if(data_received [5]<100)
     e94:	84 36       	cpi	r24, 0x64	; 100
     e96:	91 05       	cpc	r25, r1
     e98:	08 f4       	brcc	.+2      	; 0xe9c <main+0x426>
     e9a:	25 ce       	rjmp	.-950    	; 0xae6 <main+0x70>
						{
							break;
						}
						right();
     e9c:	0e 94 ac 02 	call	0x558	; 0x558 <right>
						velocity(speed_L-100,speed_R-100);
     ea0:	f4 01       	movw	r30, r8
     ea2:	80 81       	ld	r24, Z
     ea4:	d3 01       	movw	r26, r6
     ea6:	6c 91       	ld	r22, X
     ea8:	64 56       	subi	r22, 0x64	; 100
     eaa:	84 56       	subi	r24, 0x64	; 100
     eac:	0e 94 99 02 	call	0x532	; 0x532 <velocity>
						lcd_print(2,1,speed_L-100,3);
     eb0:	40 91 42 02 	lds	r20, 0x0242
     eb4:	50 91 43 02 	lds	r21, 0x0243
     eb8:	44 56       	subi	r20, 0x64	; 100
     eba:	50 40       	sbci	r21, 0x00	; 0
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	23 e0       	ldi	r18, 0x03	; 3
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
						lcd_print(2,5,speed_R-100,3);
     ec8:	40 91 5a 02 	lds	r20, 0x025A
     ecc:	50 91 5b 02 	lds	r21, 0x025B
     ed0:	44 56       	subi	r20, 0x64	; 100
     ed2:	50 40       	sbci	r21, 0x00	; 0
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	65 e0       	ldi	r22, 0x05	; 5
     ed8:	23 e0       	ldi	r18, 0x03	; 3
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
						lcd_print(1,13,500+data_received[5], 4);
     ee0:	f6 01       	movw	r30, r12
     ee2:	40 81       	ld	r20, Z
     ee4:	51 81       	ldd	r21, Z+1	; 0x01
     ee6:	4c 50       	subi	r20, 0x0C	; 12
     ee8:	5e 4f       	sbci	r21, 0xFE	; 254
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	6d e0       	ldi	r22, 0x0D	; 13
     eee:	24 e0       	ldi	r18, 0x04	; 4
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
					}
     ef6:	c6 cf       	rjmp	.-116    	; 0xe84 <main+0x40e>

00000ef8 <__subsf3>:
     ef8:	50 58       	subi	r21, 0x80	; 128

00000efa <__addsf3>:
     efa:	bb 27       	eor	r27, r27
     efc:	aa 27       	eor	r26, r26
     efe:	0e d0       	rcall	.+28     	; 0xf1c <__addsf3x>
     f00:	0d c1       	rjmp	.+538    	; 0x111c <__fp_round>
     f02:	fe d0       	rcall	.+508    	; 0x1100 <__fp_pscA>
     f04:	30 f0       	brcs	.+12     	; 0xf12 <__addsf3+0x18>
     f06:	03 d1       	rcall	.+518    	; 0x110e <__fp_pscB>
     f08:	20 f0       	brcs	.+8      	; 0xf12 <__addsf3+0x18>
     f0a:	31 f4       	brne	.+12     	; 0xf18 <__addsf3+0x1e>
     f0c:	9f 3f       	cpi	r25, 0xFF	; 255
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__addsf3+0x1a>
     f10:	1e f4       	brtc	.+6      	; 0xf18 <__addsf3+0x1e>
     f12:	f3 c0       	rjmp	.+486    	; 0x10fa <__fp_nan>
     f14:	0e f4       	brtc	.+2      	; 0xf18 <__addsf3+0x1e>
     f16:	e0 95       	com	r30
     f18:	e7 fb       	bst	r30, 7
     f1a:	e9 c0       	rjmp	.+466    	; 0x10ee <__fp_inf>

00000f1c <__addsf3x>:
     f1c:	e9 2f       	mov	r30, r25
     f1e:	0f d1       	rcall	.+542    	; 0x113e <__fp_split3>
     f20:	80 f3       	brcs	.-32     	; 0xf02 <__addsf3+0x8>
     f22:	ba 17       	cp	r27, r26
     f24:	62 07       	cpc	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	95 07       	cpc	r25, r21
     f2c:	18 f0       	brcs	.+6      	; 0xf34 <__addsf3x+0x18>
     f2e:	71 f4       	brne	.+28     	; 0xf4c <__addsf3x+0x30>
     f30:	9e f5       	brtc	.+102    	; 0xf98 <__addsf3x+0x7c>
     f32:	27 c1       	rjmp	.+590    	; 0x1182 <__fp_zero>
     f34:	0e f4       	brtc	.+2      	; 0xf38 <__addsf3x+0x1c>
     f36:	e0 95       	com	r30
     f38:	0b 2e       	mov	r0, r27
     f3a:	ba 2f       	mov	r27, r26
     f3c:	a0 2d       	mov	r26, r0
     f3e:	0b 01       	movw	r0, r22
     f40:	b9 01       	movw	r22, r18
     f42:	90 01       	movw	r18, r0
     f44:	0c 01       	movw	r0, r24
     f46:	ca 01       	movw	r24, r20
     f48:	a0 01       	movw	r20, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	ff 27       	eor	r31, r31
     f4e:	59 1b       	sub	r21, r25
     f50:	99 f0       	breq	.+38     	; 0xf78 <__addsf3x+0x5c>
     f52:	59 3f       	cpi	r21, 0xF9	; 249
     f54:	50 f4       	brcc	.+20     	; 0xf6a <__addsf3x+0x4e>
     f56:	50 3e       	cpi	r21, 0xE0	; 224
     f58:	68 f1       	brcs	.+90     	; 0xfb4 <__addsf3x+0x98>
     f5a:	1a 16       	cp	r1, r26
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	a2 2f       	mov	r26, r18
     f60:	23 2f       	mov	r18, r19
     f62:	34 2f       	mov	r19, r20
     f64:	44 27       	eor	r20, r20
     f66:	58 5f       	subi	r21, 0xF8	; 248
     f68:	f3 cf       	rjmp	.-26     	; 0xf50 <__addsf3x+0x34>
     f6a:	46 95       	lsr	r20
     f6c:	37 95       	ror	r19
     f6e:	27 95       	ror	r18
     f70:	a7 95       	ror	r26
     f72:	f0 40       	sbci	r31, 0x00	; 0
     f74:	53 95       	inc	r21
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__addsf3x+0x4e>
     f78:	7e f4       	brtc	.+30     	; 0xf98 <__addsf3x+0x7c>
     f7a:	1f 16       	cp	r1, r31
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	62 0b       	sbc	r22, r18
     f80:	73 0b       	sbc	r23, r19
     f82:	84 0b       	sbc	r24, r20
     f84:	ba f0       	brmi	.+46     	; 0xfb4 <__addsf3x+0x98>
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	a1 f0       	breq	.+40     	; 0xfb2 <__addsf3x+0x96>
     f8a:	ff 0f       	add	r31, r31
     f8c:	bb 1f       	adc	r27, r27
     f8e:	66 1f       	adc	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	c2 f7       	brpl	.-16     	; 0xf86 <__addsf3x+0x6a>
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <__addsf3x+0x98>
     f98:	ba 0f       	add	r27, r26
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 1f       	adc	r23, r19
     f9e:	84 1f       	adc	r24, r20
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <__addsf3x+0x98>
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f7 95       	ror	r31
     fac:	9e 3f       	cpi	r25, 0xFE	; 254
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <__addsf3x+0x96>
     fb0:	b3 cf       	rjmp	.-154    	; 0xf18 <__addsf3+0x1e>
     fb2:	93 95       	inc	r25
     fb4:	88 0f       	add	r24, r24
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__addsf3x+0x9e>
     fb8:	99 27       	eor	r25, r25
     fba:	ee 0f       	add	r30, r30
     fbc:	97 95       	ror	r25
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret

00000fc2 <__cmpsf2>:
     fc2:	71 d0       	rcall	.+226    	; 0x10a6 <__fp_cmp>
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <__cmpsf2+0x6>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	08 95       	ret

00000fca <__fixsfsi>:
     fca:	04 d0       	rcall	.+8      	; 0xfd4 <__fixunssfsi>
     fcc:	68 94       	set
     fce:	b1 11       	cpse	r27, r1
     fd0:	d9 c0       	rjmp	.+434    	; 0x1184 <__fp_szero>
     fd2:	08 95       	ret

00000fd4 <__fixunssfsi>:
     fd4:	bc d0       	rcall	.+376    	; 0x114e <__fp_splitA>
     fd6:	88 f0       	brcs	.+34     	; 0xffa <__fixunssfsi+0x26>
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	90 f0       	brcs	.+36     	; 0x1000 <__fixunssfsi+0x2c>
     fdc:	b9 2f       	mov	r27, r25
     fde:	99 27       	eor	r25, r25
     fe0:	b7 51       	subi	r27, 0x17	; 23
     fe2:	a0 f0       	brcs	.+40     	; 0x100c <__fixunssfsi+0x38>
     fe4:	d1 f0       	breq	.+52     	; 0x101a <__fixunssfsi+0x46>
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	1a f0       	brmi	.+6      	; 0xff6 <__fixunssfsi+0x22>
     ff0:	ba 95       	dec	r27
     ff2:	c9 f7       	brne	.-14     	; 0xfe6 <__fixunssfsi+0x12>
     ff4:	12 c0       	rjmp	.+36     	; 0x101a <__fixunssfsi+0x46>
     ff6:	b1 30       	cpi	r27, 0x01	; 1
     ff8:	81 f0       	breq	.+32     	; 0x101a <__fixunssfsi+0x46>
     ffa:	c3 d0       	rcall	.+390    	; 0x1182 <__fp_zero>
     ffc:	b1 e0       	ldi	r27, 0x01	; 1
     ffe:	08 95       	ret
    1000:	c0 c0       	rjmp	.+384    	; 0x1182 <__fp_zero>
    1002:	67 2f       	mov	r22, r23
    1004:	78 2f       	mov	r23, r24
    1006:	88 27       	eor	r24, r24
    1008:	b8 5f       	subi	r27, 0xF8	; 248
    100a:	39 f0       	breq	.+14     	; 0x101a <__fixunssfsi+0x46>
    100c:	b9 3f       	cpi	r27, 0xF9	; 249
    100e:	cc f3       	brlt	.-14     	; 0x1002 <__fixunssfsi+0x2e>
    1010:	86 95       	lsr	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b3 95       	inc	r27
    1018:	d9 f7       	brne	.-10     	; 0x1010 <__fixunssfsi+0x3c>
    101a:	3e f4       	brtc	.+14     	; 0x102a <__fixunssfsi+0x56>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	08 95       	ret

0000102c <__floatunsisf>:
    102c:	e8 94       	clt
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <__floatsisf+0x12>

00001030 <__floatsisf>:
    1030:	97 fb       	bst	r25, 7
    1032:	3e f4       	brtc	.+14     	; 0x1042 <__floatsisf+0x12>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	99 23       	and	r25, r25
    1044:	a9 f0       	breq	.+42     	; 0x1070 <__floatsisf+0x40>
    1046:	f9 2f       	mov	r31, r25
    1048:	96 e9       	ldi	r25, 0x96	; 150
    104a:	bb 27       	eor	r27, r27
    104c:	93 95       	inc	r25
    104e:	f6 95       	lsr	r31
    1050:	87 95       	ror	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f1 11       	cpse	r31, r1
    105a:	f8 cf       	rjmp	.-16     	; 0x104c <__floatsisf+0x1c>
    105c:	fa f4       	brpl	.+62     	; 0x109c <__floatsisf+0x6c>
    105e:	bb 0f       	add	r27, r27
    1060:	11 f4       	brne	.+4      	; 0x1066 <__floatsisf+0x36>
    1062:	60 ff       	sbrs	r22, 0
    1064:	1b c0       	rjmp	.+54     	; 0x109c <__floatsisf+0x6c>
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	16 c0       	rjmp	.+44     	; 0x109c <__floatsisf+0x6c>
    1070:	88 23       	and	r24, r24
    1072:	11 f0       	breq	.+4      	; 0x1078 <__floatsisf+0x48>
    1074:	96 e9       	ldi	r25, 0x96	; 150
    1076:	11 c0       	rjmp	.+34     	; 0x109a <__floatsisf+0x6a>
    1078:	77 23       	and	r23, r23
    107a:	21 f0       	breq	.+8      	; 0x1084 <__floatsisf+0x54>
    107c:	9e e8       	ldi	r25, 0x8E	; 142
    107e:	87 2f       	mov	r24, r23
    1080:	76 2f       	mov	r23, r22
    1082:	05 c0       	rjmp	.+10     	; 0x108e <__floatsisf+0x5e>
    1084:	66 23       	and	r22, r22
    1086:	71 f0       	breq	.+28     	; 0x10a4 <__floatsisf+0x74>
    1088:	96 e8       	ldi	r25, 0x86	; 134
    108a:	86 2f       	mov	r24, r22
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	2a f0       	brmi	.+10     	; 0x109c <__floatsisf+0x6c>
    1092:	9a 95       	dec	r25
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	da f7       	brpl	.-10     	; 0x1092 <__floatsisf+0x62>
    109c:	88 0f       	add	r24, r24
    109e:	96 95       	lsr	r25
    10a0:	87 95       	ror	r24
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret

000010a6 <__fp_cmp>:
    10a6:	99 0f       	add	r25, r25
    10a8:	00 08       	sbc	r0, r0
    10aa:	55 0f       	add	r21, r21
    10ac:	aa 0b       	sbc	r26, r26
    10ae:	e0 e8       	ldi	r30, 0x80	; 128
    10b0:	fe ef       	ldi	r31, 0xFE	; 254
    10b2:	16 16       	cp	r1, r22
    10b4:	17 06       	cpc	r1, r23
    10b6:	e8 07       	cpc	r30, r24
    10b8:	f9 07       	cpc	r31, r25
    10ba:	c0 f0       	brcs	.+48     	; 0x10ec <__fp_cmp+0x46>
    10bc:	12 16       	cp	r1, r18
    10be:	13 06       	cpc	r1, r19
    10c0:	e4 07       	cpc	r30, r20
    10c2:	f5 07       	cpc	r31, r21
    10c4:	98 f0       	brcs	.+38     	; 0x10ec <__fp_cmp+0x46>
    10c6:	62 1b       	sub	r22, r18
    10c8:	73 0b       	sbc	r23, r19
    10ca:	84 0b       	sbc	r24, r20
    10cc:	95 0b       	sbc	r25, r21
    10ce:	39 f4       	brne	.+14     	; 0x10de <__fp_cmp+0x38>
    10d0:	0a 26       	eor	r0, r26
    10d2:	61 f0       	breq	.+24     	; 0x10ec <__fp_cmp+0x46>
    10d4:	23 2b       	or	r18, r19
    10d6:	24 2b       	or	r18, r20
    10d8:	25 2b       	or	r18, r21
    10da:	21 f4       	brne	.+8      	; 0x10e4 <__fp_cmp+0x3e>
    10dc:	08 95       	ret
    10de:	0a 26       	eor	r0, r26
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <__fp_cmp+0x3e>
    10e2:	a1 40       	sbci	r26, 0x01	; 1
    10e4:	a6 95       	lsr	r26
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	81 1d       	adc	r24, r1
    10ea:	81 1d       	adc	r24, r1
    10ec:	08 95       	ret

000010ee <__fp_inf>:
    10ee:	97 f9       	bld	r25, 7
    10f0:	9f 67       	ori	r25, 0x7F	; 127
    10f2:	80 e8       	ldi	r24, 0x80	; 128
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	08 95       	ret

000010fa <__fp_nan>:
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	80 ec       	ldi	r24, 0xC0	; 192
    10fe:	08 95       	ret

00001100 <__fp_pscA>:
    1100:	00 24       	eor	r0, r0
    1102:	0a 94       	dec	r0
    1104:	16 16       	cp	r1, r22
    1106:	17 06       	cpc	r1, r23
    1108:	18 06       	cpc	r1, r24
    110a:	09 06       	cpc	r0, r25
    110c:	08 95       	ret

0000110e <__fp_pscB>:
    110e:	00 24       	eor	r0, r0
    1110:	0a 94       	dec	r0
    1112:	12 16       	cp	r1, r18
    1114:	13 06       	cpc	r1, r19
    1116:	14 06       	cpc	r1, r20
    1118:	05 06       	cpc	r0, r21
    111a:	08 95       	ret

0000111c <__fp_round>:
    111c:	09 2e       	mov	r0, r25
    111e:	03 94       	inc	r0
    1120:	00 0c       	add	r0, r0
    1122:	11 f4       	brne	.+4      	; 0x1128 <__fp_round+0xc>
    1124:	88 23       	and	r24, r24
    1126:	52 f0       	brmi	.+20     	; 0x113c <__fp_round+0x20>
    1128:	bb 0f       	add	r27, r27
    112a:	40 f4       	brcc	.+16     	; 0x113c <__fp_round+0x20>
    112c:	bf 2b       	or	r27, r31
    112e:	11 f4       	brne	.+4      	; 0x1134 <__fp_round+0x18>
    1130:	60 ff       	sbrs	r22, 0
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__fp_round+0x20>
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__fp_split3>:
    113e:	57 fd       	sbrc	r21, 7
    1140:	90 58       	subi	r25, 0x80	; 128
    1142:	44 0f       	add	r20, r20
    1144:	55 1f       	adc	r21, r21
    1146:	59 f0       	breq	.+22     	; 0x115e <__fp_splitA+0x10>
    1148:	5f 3f       	cpi	r21, 0xFF	; 255
    114a:	71 f0       	breq	.+28     	; 0x1168 <__fp_splitA+0x1a>
    114c:	47 95       	ror	r20

0000114e <__fp_splitA>:
    114e:	88 0f       	add	r24, r24
    1150:	97 fb       	bst	r25, 7
    1152:	99 1f       	adc	r25, r25
    1154:	61 f0       	breq	.+24     	; 0x116e <__fp_splitA+0x20>
    1156:	9f 3f       	cpi	r25, 0xFF	; 255
    1158:	79 f0       	breq	.+30     	; 0x1178 <__fp_splitA+0x2a>
    115a:	87 95       	ror	r24
    115c:	08 95       	ret
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	55 1f       	adc	r21, r21
    1166:	f2 cf       	rjmp	.-28     	; 0x114c <__fp_split3+0xe>
    1168:	46 95       	lsr	r20
    116a:	f1 df       	rcall	.-30     	; 0x114e <__fp_splitA>
    116c:	08 c0       	rjmp	.+16     	; 0x117e <__fp_splitA+0x30>
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	18 06       	cpc	r1, r24
    1174:	99 1f       	adc	r25, r25
    1176:	f1 cf       	rjmp	.-30     	; 0x115a <__fp_splitA+0xc>
    1178:	86 95       	lsr	r24
    117a:	71 05       	cpc	r23, r1
    117c:	61 05       	cpc	r22, r1
    117e:	08 94       	sec
    1180:	08 95       	ret

00001182 <__fp_zero>:
    1182:	e8 94       	clt

00001184 <__fp_szero>:
    1184:	bb 27       	eor	r27, r27
    1186:	66 27       	eor	r22, r22
    1188:	77 27       	eor	r23, r23
    118a:	cb 01       	movw	r24, r22
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__gesf2>:
    1190:	8a df       	rcall	.-236    	; 0x10a6 <__fp_cmp>
    1192:	08 f4       	brcc	.+2      	; 0x1196 <__gesf2+0x6>
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	08 95       	ret

00001198 <__mulsf3>:
    1198:	0b d0       	rcall	.+22     	; 0x11b0 <__mulsf3x>
    119a:	c0 cf       	rjmp	.-128    	; 0x111c <__fp_round>
    119c:	b1 df       	rcall	.-158    	; 0x1100 <__fp_pscA>
    119e:	28 f0       	brcs	.+10     	; 0x11aa <__mulsf3+0x12>
    11a0:	b6 df       	rcall	.-148    	; 0x110e <__fp_pscB>
    11a2:	18 f0       	brcs	.+6      	; 0x11aa <__mulsf3+0x12>
    11a4:	95 23       	and	r25, r21
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__mulsf3+0x12>
    11a8:	a2 cf       	rjmp	.-188    	; 0x10ee <__fp_inf>
    11aa:	a7 cf       	rjmp	.-178    	; 0x10fa <__fp_nan>
    11ac:	11 24       	eor	r1, r1
    11ae:	ea cf       	rjmp	.-44     	; 0x1184 <__fp_szero>

000011b0 <__mulsf3x>:
    11b0:	c6 df       	rcall	.-116    	; 0x113e <__fp_split3>
    11b2:	a0 f3       	brcs	.-24     	; 0x119c <__mulsf3+0x4>

000011b4 <__mulsf3_pse>:
    11b4:	95 9f       	mul	r25, r21
    11b6:	d1 f3       	breq	.-12     	; 0x11ac <__mulsf3+0x14>
    11b8:	95 0f       	add	r25, r21
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	55 1f       	adc	r21, r21
    11be:	62 9f       	mul	r22, r18
    11c0:	f0 01       	movw	r30, r0
    11c2:	72 9f       	mul	r23, r18
    11c4:	bb 27       	eor	r27, r27
    11c6:	f0 0d       	add	r31, r0
    11c8:	b1 1d       	adc	r27, r1
    11ca:	63 9f       	mul	r22, r19
    11cc:	aa 27       	eor	r26, r26
    11ce:	f0 0d       	add	r31, r0
    11d0:	b1 1d       	adc	r27, r1
    11d2:	aa 1f       	adc	r26, r26
    11d4:	64 9f       	mul	r22, r20
    11d6:	66 27       	eor	r22, r22
    11d8:	b0 0d       	add	r27, r0
    11da:	a1 1d       	adc	r26, r1
    11dc:	66 1f       	adc	r22, r22
    11de:	82 9f       	mul	r24, r18
    11e0:	22 27       	eor	r18, r18
    11e2:	b0 0d       	add	r27, r0
    11e4:	a1 1d       	adc	r26, r1
    11e6:	62 1f       	adc	r22, r18
    11e8:	73 9f       	mul	r23, r19
    11ea:	b0 0d       	add	r27, r0
    11ec:	a1 1d       	adc	r26, r1
    11ee:	62 1f       	adc	r22, r18
    11f0:	83 9f       	mul	r24, r19
    11f2:	a0 0d       	add	r26, r0
    11f4:	61 1d       	adc	r22, r1
    11f6:	22 1f       	adc	r18, r18
    11f8:	74 9f       	mul	r23, r20
    11fa:	33 27       	eor	r19, r19
    11fc:	a0 0d       	add	r26, r0
    11fe:	61 1d       	adc	r22, r1
    1200:	23 1f       	adc	r18, r19
    1202:	84 9f       	mul	r24, r20
    1204:	60 0d       	add	r22, r0
    1206:	21 1d       	adc	r18, r1
    1208:	82 2f       	mov	r24, r18
    120a:	76 2f       	mov	r23, r22
    120c:	6a 2f       	mov	r22, r26
    120e:	11 24       	eor	r1, r1
    1210:	9f 57       	subi	r25, 0x7F	; 127
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	8a f0       	brmi	.+34     	; 0x1238 <__mulsf3_pse+0x84>
    1216:	e1 f0       	breq	.+56     	; 0x1250 <__mulsf3_pse+0x9c>
    1218:	88 23       	and	r24, r24
    121a:	4a f0       	brmi	.+18     	; 0x122e <__mulsf3_pse+0x7a>
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	bb 1f       	adc	r27, r27
    1222:	66 1f       	adc	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	91 50       	subi	r25, 0x01	; 1
    122a:	50 40       	sbci	r21, 0x00	; 0
    122c:	a9 f7       	brne	.-22     	; 0x1218 <__mulsf3_pse+0x64>
    122e:	9e 3f       	cpi	r25, 0xFE	; 254
    1230:	51 05       	cpc	r21, r1
    1232:	70 f0       	brcs	.+28     	; 0x1250 <__mulsf3_pse+0x9c>
    1234:	5c cf       	rjmp	.-328    	; 0x10ee <__fp_inf>
    1236:	a6 cf       	rjmp	.-180    	; 0x1184 <__fp_szero>
    1238:	5f 3f       	cpi	r21, 0xFF	; 255
    123a:	ec f3       	brlt	.-6      	; 0x1236 <__mulsf3_pse+0x82>
    123c:	98 3e       	cpi	r25, 0xE8	; 232
    123e:	dc f3       	brlt	.-10     	; 0x1236 <__mulsf3_pse+0x82>
    1240:	86 95       	lsr	r24
    1242:	77 95       	ror	r23
    1244:	67 95       	ror	r22
    1246:	b7 95       	ror	r27
    1248:	f7 95       	ror	r31
    124a:	e7 95       	ror	r30
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	c1 f7       	brne	.-16     	; 0x1240 <__mulsf3_pse+0x8c>
    1250:	fe 2b       	or	r31, r30
    1252:	88 0f       	add	r24, r24
    1254:	91 1d       	adc	r25, r1
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	97 f9       	bld	r25, 7
    125c:	08 95       	ret

0000125e <__udivmodhi4>:
    125e:	aa 1b       	sub	r26, r26
    1260:	bb 1b       	sub	r27, r27
    1262:	51 e1       	ldi	r21, 0x11	; 17
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <__udivmodhi4_ep>

00001266 <__udivmodhi4_loop>:
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	a6 17       	cp	r26, r22
    126c:	b7 07       	cpc	r27, r23
    126e:	10 f0       	brcs	.+4      	; 0x1274 <__udivmodhi4_ep>
    1270:	a6 1b       	sub	r26, r22
    1272:	b7 0b       	sbc	r27, r23

00001274 <__udivmodhi4_ep>:
    1274:	88 1f       	adc	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	5a 95       	dec	r21
    127a:	a9 f7       	brne	.-22     	; 0x1266 <__udivmodhi4_loop>
    127c:	80 95       	com	r24
    127e:	90 95       	com	r25
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	08 95       	ret

00001286 <__divmodhi4>:
    1286:	97 fb       	bst	r25, 7
    1288:	09 2e       	mov	r0, r25
    128a:	07 26       	eor	r0, r23
    128c:	0a d0       	rcall	.+20     	; 0x12a2 <__divmodhi4_neg1>
    128e:	77 fd       	sbrc	r23, 7
    1290:	04 d0       	rcall	.+8      	; 0x129a <__divmodhi4_neg2>
    1292:	e5 df       	rcall	.-54     	; 0x125e <__udivmodhi4>
    1294:	06 d0       	rcall	.+12     	; 0x12a2 <__divmodhi4_neg1>
    1296:	00 20       	and	r0, r0
    1298:	1a f4       	brpl	.+6      	; 0x12a0 <__divmodhi4_exit>

0000129a <__divmodhi4_neg2>:
    129a:	70 95       	com	r23
    129c:	61 95       	neg	r22
    129e:	7f 4f       	sbci	r23, 0xFF	; 255

000012a0 <__divmodhi4_exit>:
    12a0:	08 95       	ret

000012a2 <__divmodhi4_neg1>:
    12a2:	f6 f7       	brtc	.-4      	; 0x12a0 <__divmodhi4_exit>
    12a4:	90 95       	com	r25
    12a6:	81 95       	neg	r24
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <_exit>:
    12ac:	f8 94       	cli

000012ae <__stop_program>:
    12ae:	ff cf       	rjmp	.-2      	; 0x12ae <__stop_program>
